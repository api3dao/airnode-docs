{
  "id": 31,
  "distPath": "docs/.vitepress/dist/guides/airnode/quick-start-aws/index.html",
  "indexPath": "docs/.vitepress/search-files/guides/airnode/quick-start-aws/index.json",
  "docSet": "/guides/",
  "url": "/guides/airnode/quick-start-aws/index.html",
  "content": "  ðŸ“‚Â Guides â†’ Airnode The &quot;Quick&quot; series of guides are simple introductions demonstrating the deployment of an Airnode. Configuration files are provided with only minor changes to be made. This guide uses the Airnode [deployer image] (/reference/airnode/latest/docker/deployer-image.html) which deploys the off-chain component of Airnode (a.k.a., the node) to AWS. It uses an API endpoint (GET /simple/price) from [CoinGecko] (https://www.coingecko.com/en/api/documentation) âžš which returns the current value of a coin. This demo does not detail the overall configuration of an Airnode, it is just a quick start guide.  Deployment Files [#] (#deployment-files)  -  An Airnode cloud provider deployment uses the Docker image [deployer image] (/reference/airnode/latest/docker/deployer-image.html) which requires three files as input. --- [config.json] (#config-json)  --- [secrets.env] (#secrets-env)  --- [aws.env] (#aws-env)  For the purpose of this guide, these files have been created and only require a few minor changes to make the deployment of the Airnode successful. These changes are needed to supply AWS credentials, a chain provider url, and a mnemonic.  Install Prerequisites [#] (#install-prerequisites)  -  Install the [Docker Desktop] (https://docs.docker.com/get-docker/) âžš and launch it.  Project Folder [#] (#project-folder)  --  A project folder is needed for this demo. You can create it manually or download a zip file ready to go. @tab:Download Download the [ quick-start-aws] (/zip-files/quick-start-aws-v0.10.zip) project folder. @tab:Create Manually Create a folder called /quick-start-aws. Place the contents of the files provided above ( [Deployment Files Configuration] (#deployment-files-configuration) ) into the files shown below. quick-start-aws â”œâ”€â”€ aws.env â”œâ”€â”€ config.json â””â”€â”€ secrets.env  1 2 3 4  Deployment Files Configuration [#] (#deployment-files-configuration)  ----  Prepare the three configuration files. By default, the Airnode deployer image looks for config.json, secrets.env, and aws.env in the project root directory and writes receipt.json to the project root directory.  config.json [#] (#config-json)   config.json json{ &quot;chains&quot;: [ { &quot;authorizers&quot;: { &quot;requesterEndpointAuthorizers&quot;: [] }, &quot;authorizations&quot;: { &quot;requesterEndpointAuthorizations&quot;: {} }, &quot;contracts&quot;: { &quot;AirnodeRrp&quot;: &quot;0xa0AD79D995DdeeB18a14eAef56A549A04e3Aa1Bd&quot; }, &quot;id&quot;: &quot;4&quot;, &quot;providers&quot;: { &quot;myChainProvider&quot;: { &quot;url&quot;: &quot;${CHAIN_PROVIDER_URL}&quot; } }, &quot;type&quot;: &quot;evm&quot;, &quot;options&quot;: { &quot;fulfillmentGasLimit&quot;: 500000, &quot;gasPriceOracle&quot;: [ { &quot;gasPriceStrategy&quot;: &quot;latestBlockPercentileGasPrice&quot;, &quot;percentile&quot;: 60, &quot;minTransactionCount&quot;: 20, &quot;pastToCompareInBlocks&quot;: 20, &quot;maxDeviationMultiplier&quot;: 2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedGasPrice&quot;, &quot;recommendedGasPriceMultiplier&quot;: 1.2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedEip1559GasPrice&quot;, &quot;baseFeeMultiplier&quot;: 2, &quot;priorityFee&quot;: { &quot;value&quot;: 3.12, &quot;unit&quot;: &quot;gwei&quot; } }, { &quot;gasPriceStrategy&quot;: &quot;constantGasPrice&quot;, &quot;gasPrice&quot;: { &quot;value&quot;: 10, &quot;unit&quot;: &quot;gwei&quot; } } ] }, &quot;maxConcurrency&quot;: 100 } ], &quot;nodeSettings&quot;: { &quot;cloudProvider&quot;: { &quot;type&quot;: &quot;aws&quot;, &quot;region&quot;: &quot;us-east-1&quot;, &quot;disableConcurrencyReservations&quot;: true }, &quot;airnodeWalletMnemonic&quot;: &quot;${AIRNODE_WALLET_MNEMONIC}&quot;, &quot;heartbeat&quot;: { &quot;enabled&quot;: false }, &quot;httpGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;httpSignedDataGateway&quot;: { &quot;enabled&quot;: false }, &quot;logFormat&quot;: &quot;plain&quot;, &quot;logLevel&quot;: &quot;INFO&quot;, &quot;nodeVersion&quot;: &quot;0.10.0&quot;, &quot;stage&quot;: &quot;tutorial-aws&quot; }, &quot;triggers&quot;: { &quot;rrp&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, &quot;cacheResponses&quot;: false } ], &quot;http&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot; } ], &quot;httpSignedData&quot;: [] }, &quot;templates&quot;: [], &quot;ois&quot;: [ { &quot;oisFormat&quot;: &quot;1.1.2&quot;, &quot;title&quot;: &quot;CoinGecko Basic Request&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;apiSpecifications&quot;: { &quot;servers&quot;: [ { &quot;url&quot;: &quot;https://api.coingecko.com/api/v3&quot; } ], &quot;paths&quot;: { &quot;/simple/price&quot;: { &quot;get&quot;: { &quot;parameters&quot;: [ { &quot;in&quot;: &quot;query&quot;, &quot;name&quot;: &quot;ids&quot; }, { &quot;in&quot;: &quot;query&quot;, &quot;name&quot;: &quot;vs_currencies&quot; } ] } } }, &quot;components&quot;: { &quot;securitySchemes&quot;: {} }, &quot;security&quot;: {} }, &quot;endpoints&quot;: [ { &quot;name&quot;: &quot;coinMarketData&quot;, &quot;operation&quot;: { &quot;method&quot;: &quot;get&quot;, &quot;path&quot;: &quot;/simple/price&quot; }, &quot;fixedOperationParameters&quot;: [], &quot;reservedParameters&quot;: [ { &quot;name&quot;: &quot;_type&quot;, &quot;fixed&quot;: &quot;int256&quot; }, { &quot;name&quot;: &quot;_path&quot;, &quot;fixed&quot;: &quot;api3.usd&quot; }, { &quot;name&quot;: &quot;_times&quot;, &quot;fixed&quot;: &quot;1000000&quot; } ], &quot;parameters&quot;: [ { &quot;name&quot;: &quot;coinIds&quot;, &quot;operationParameter&quot;: { &quot;in&quot;: &quot;query&quot;, &quot;name&quot;: &quot;ids&quot; } }, { &quot;name&quot;: &quot;coinVs_currencies&quot;, &quot;operationParameter&quot;: { &quot;in&quot;: &quot;query&quot;, &quot;name&quot;: &quot;vs_currencies&quot; } } ] } ] } ], &quot;apiCredentials&quot;: [] }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 This file requires no changes on your part. It has been created with just one API endpoint. It will instruct the Airnode to attach to the Rinkeby test network. There are three variables this file will extract (interpolation) from secrets.env. Note that nodeSetting.disableConcurrencyReservations has been set to true. This is a precaution for new AWS accounts that have yet to address concurrency management. For production deployments, disableConcurrencyReservations should be set to false. See [disableConcurrencyReservations] (./../../../reference/airnode/latest/understand/configuring-airnode.html#cloudprovider) under the cloudProvider key and [maxConcurrency] (./../../../reference/airnode/latest/understand/configuring-airnode.html#maxconcurrency) for more information.  secrets.env [#] (#secrets-env)   secrets.env shCHAIN_PROVIDER_URL=&quot;&quot; AIRNODE_WALLET_MNEMONIC=&quot;&quot;  1 2 Add values for each of the these fields. CHAIN_PROVIDER_URL: A chain provider url from a provider such as [Infura] (https://infura.io/) . Make sure the provider url you use is for the Rinkeby test network. Using another chain provider other than Infura is acceptable. -Sign-up or login to Infura. -Create a new project, select the Settings tab in the project. -Copy the URL (https) for Rinkeby under the Endpoints pick list. AIRNODE_WALLET_MNEMONIC: Provide the seed phrase (mnemonic) to a digital wallet. For the purpose of this demo it does not need eth in it for the Rinkeby test network. If you don&#39;t have one use the Admin CLI command [generate-airnode-mnemonic] (./../../../reference/packages/admin-cli.html#generate-airnode-mnemonic) to create one or another method you prefer.  aws.env [#] (#aws-env)   aws.env shAWS_ACCESS_KEY_ID= AWS_SECRET_ACCESS_KEY=  1 2 Add the access credentials to your AWS account. The deployer image will use them to install the Airnode functions to Lambda under your account&#39;s control. If you do not have an account watch this [video] (https://www.youtube.com/watch?v=KngM5bfpttA) to create one. Unlike secrets.env, you cannot surround values with double quotes (&quot;). ---AWS_ACCESS_KEY_ID: Is ACCESS_KEY_ID in IAM. ---AWS_SECRET_ACCESS_KEY: Is SECRET_ACCESS_KEY in IAM.  Deploy [#] (#deploy)  -  Make sure Docker is running and then execute the deployer image from the root of the quick-deploy-aws folder. A receipt.json file will be created upon completion. It contains some deployment information and is used to remove the Airnode. Warning about simultaneous deployments Avoid running multiple deployments simultaneously as doing so might result in a broken deployment. If this occurs, the standard removal approach may not succeed and [Manual Removal] (../../docker/deployer-image.html#manual-removal) may be required.  Run the following command to deploy the demo Airnode. Note that the version of api3/airnode-deployer matches the nodeVersion in the config.json file. Normally (for Linux/Mac/WSL2) the deployer image deploy command is run by the user root. This may cause permission issues when the receipt.json file is generated. Optionally you can specify the [UID (user identifier)] (https://en.wikipedia.org/wiki/User_identifier) and [ GID (group identifier)] (https://en.wikipedia.org/wiki/Group_identifier) that the deployer image should use. Do so by setting the environment variables USER_ID and GROUP_ID, otherwise omit the line containing the variables. @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -e USER_ID=$(id -u) -e GROUP_ID=$(id -g) \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 deploy  1 2 3 4 @tab:Windows For Windows, use CMD (and not PowerShell). batchdocker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 deploy  1 2 3  Test the Airnode [#] (#test-the-airnode)  -  After a successful deployment the Airnode can be tested directly using the [HTTP Gateways] (./../../../reference/airnode/latest/understand/http-gateways.html) without accessing the blockchain. You provide endpoint parameters to get a response from an integrated API.  HTTP Gateway [#] (#http-gateway)   Looking at the [config.json] (./config-json.html) code snippet below shows the HTTP gateway was activated for the Airnode. Furthermore the endpoint for /simple/price (with an endpointId of 0x6...af6) has been added to triggers.http[n]. Only those endpoints added to the http array can be tested. json&quot;nodeSettings&quot;: { ... &quot;httpGateway&quot;: { &quot;enabled&quot;: true, // The gateway is activated for this Airnode &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, ... }, &quot;triggers&quot;: { &quot;rrp&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, &quot;cacheResponses&quot;: false } ], &quot;http&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, } ], ... }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  Execute Endpoint [#] (#execute-endpoint)   Use CURL to execute the Airnode and get the results from the CoinGecko endpoint /simple/price bypassing the Rinkeby test network that Airnode was deployed for. As an alternative to CURL try an app such as [Insomnia] (https://insomnia.rest/) or [Postman] (https://www.postman.com/product/rest-client/) . Windows users can also use [Windows Subsystem for Linux] (https://docs.microsoft.com/en-us/windows/wsl/install) (WSL2) to run CURL for Linux. In order to test an endpoint make a HTTP POST request with the endpointId as a path parameter, the Content-Type header set to application/json and place the endpoint parameter in the request body as a key/value pair. ----X: POST ----H: The Content-Type using the value of application/json. ----d: Use request body data to pass the endpoint parameter key/value pair. URL: &lt;httpGatewayUrl&gt;/0xf466b8feec41e9e50815e0c9dca4db1ff959637e564bb13fefa99e9f9f90453c ---&lt;httpGatewayUrl&gt;: The base URL to the gateway including the secret UUID path parameter, displayed in the terminal at the end of an Airnode deployment using a [Docker image] (./../../docker/) . Update the placeholder in the CURL example below with its value. ---0xf466b8feec41e9e50815e0c9dca4db1ff959637e564bb13fefa99e9f9f90453c: Passed as a path parameter, the endpointId to call, see triggers.rrp[0].endpointId in the config.json file.  Request [#] (#request)   @tab:Linux/Mac/WSL2 shcurl -v \\ -X POST \\ -H &#39;Content-Type: application/json&#39; \\ -d &#39;{&quot;parameters&quot;: {&quot;coinIds&quot;: &quot;api3&quot;, &quot;coinVs_currencies&quot;: &quot;usd&quot;}}&#39; \\ &#39;&lt;httpGatewayUrl&gt;/0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&#39;  1 2 3 4 5 @tab:Windows batchcurl -v ^ -X POST ^ -H &quot;Content-Type: application/json&quot; ^ -d &quot;{\\&quot;parameters\\&quot;: {\\&quot;coinIds\\&quot;: \\&quot;api3\\&quot;, \\&quot;coinVs_currencies\\&quot;: \\&quot;usd\\&quot;}}&quot; ^ &quot;&lt;httpGatewayUrl&gt;/0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;  1 2 3 4 5  Response [#] (#response)   json{ &quot;encodedValue&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000362b30&quot;, &quot;rawValue&quot;: { &quot;api3&quot;: { &quot;usd&quot;: 3.55 } }, &quot;values&quot;: [&quot;3550000&quot;] }  1 2 3 4 5 6 7 8 9 Note the JSON response values is the API3 price multiplied by 1e6, which results from setting the _times reserved parameter to 1000000 in config.json. This manipulation is necessary in order to correctly handle floating point numbers.  ---encodedValue: This is the only field that gets sent to a requester (smart contract) on-chain. It is the encoded bytes of the values field. A requester must decode it to read the response values.  ---rawValue: The API&#39;s response to Airnode. Presented by the HTTP gateway as a convenience. This is never sent to a requester on-chain.  ---values: A array of values after they are [extracted and converted] (../../../reference/packages/adapter.html#conversion) from the encodedValue to the target type, in this case api3.usd from _path in [reservedParameters] (../../../reference/specifications/reserved-parameters.html) . The HTTP gateway provides this as a convenience and never sends the decoded values to a requester on-chain.   Remove the Airnode [#] (#remove-the-airnode)    When you are done with this demo you can remove the deployed Airnode. The following command uses the receipt.json file that was created when the Airnode was deployed. @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 remove-with-receipt  1 2 3 @tab:Windows For Windows, use CMD (and not PowerShell). batchdocker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 remove-with-receipt  1 2 3  Summary [#] (#summary)  ---  You have deployed an Airnode on AWS and tested it using the HTTP gateway that was enabled as part of the Airnode deployment. The Airnode, upon deployment, started contacting the AirnodeRrpV0 contract on the Rinkeby testnet to gather any requests made by requesters to this Airnode. This tutorial did not address making a request as its purpose was simply to quickly deploy a functional Airnode. Learn more about AWS resources that Airnode uses in the [Cloud Resources] (./../../../reference/cloud-resources.html) doc. [Previous pageâ˜… Getting Started] (/guides/airnode/)  [Next pageQuick Start GCP] (/guides/airnode/deploy-gcp.html)  "
}
