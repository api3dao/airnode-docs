{"id":120,"distPath":"docs/.vitepress/dist/reference/ois/latest/index.html","indexPath":"docs/.vitepress/search-files/reference/ois/latest/index.json","docSet":"/reference/ois/latest/","url":"/reference/ois/latest/index.html","content":"  üìÇ¬†Reference ‚Üí OIS ‚Üí v1.2  Understanding OIS [#] (#frontmatter-title)  ===  Relocate Move this page to Explore OIS (or Oracle Integration Specifications) is a JSON object that describes an API specification and defines Airnode endpoints linked to API operations (a.k.a. endpoints). It is one of five root level objects in a config.json file that defines an Airnode. ---chains ---nodeSettings ---triggers ---ois ---apiCredentials For more information about the config.json file see the [Deployment Files] (/airnode/v0.7/reference/deployment-files/config-json.html) section in the Airnode document set. In the diagram below, an Airnode exposes its endpoints to the on-chain AirnodeRrpV0.sol contract. Airnode uses the OIS object to map its endpoints to an API operation. It should be noted that Airnode can have more than one endpoint that maps to the same API operation. ![image] (/assets/ois-overview-extended.c8601430.png) A) ois.apiSpecifications.paths: Describes API operations. B) ois.endpoints: Defines Airnode endpoints. Relationships exist between an Airnode endpoint and an API operation.  Releases [#] (#releases)     API Mapping Examples [#] (#api-mapping-examples)  ----  The following are three possible Airnode to API operation mapping examples. Mapping details are better documented in the next doc [Specification] (./ois.html) .  Simple Airnode Endpoint [#] (#simple-airnode-endpoint)   An API has a simple operation the returns the current value of an on-chain token GET /token/{id} and has id as its only parameter. Here the Airnode endpoint will only mimic the API operation. To do so, the Airnode will declare its endpoint to have one parameter, id. Airnode will accept an id argument from an on-chain request and move its value to the API operation&#39;s path parameter named id. json// ois.apiSpecifications (API operations) &quot;paths&quot;: { &quot;/token/{id}&quot;: { &lt;‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê &quot;get&quot;: { &lt;‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚îÇ &quot;parameters&quot;: [ ‚îÇ‚îÇ { ‚îÇ‚îÇ &quot;in&quot;: &quot;path&quot;, ‚îÇ‚îÇ &quot;name&quot;: &quot;id&quot; ‚îÇ‚îÇ }, ‚îÇ‚îÇ ... ‚îÇ‚îÇ ] ‚îÇ‚îÇ ... ‚îÇ‚îÇ } ‚îÇ‚îÇ ‚îÇ‚îÇ // ois.endpoints (Airnode Endpoints) ‚îÇ‚îÇ Mapping between API operations and Airnode endpoints. &quot;endpoints&quot;: [ ‚îÇ‚îÇ { ‚îÇ‚îÇ &quot;name&quot;: &quot;tokenValue&quot;, ‚îÇ‚îÇ &quot;operation&quot;: { ‚îÇ‚îÇ &quot;method&quot;: &quot;get&quot;, &lt;‚îÄ‚îÄ‚îò‚îÇ &quot;path&quot;: &quot;/token/{id}&quot; &lt;‚îÄ‚îÄ‚îÄ‚îò }, ... &quot;parameters&quot;: [ { &quot;name&quot;: &quot;token&quot;, &quot;operationParameter&quot;: { &quot;in&quot;: &quot;path&quot;, &quot;name&quot;: &quot;id&quot; } ... ]  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  Fixed Operation Parameters Airnode Endpoint [#] (#fixed-operation-parameters-airnode-endpoint)   An API may have an operation that returns a crypto coin in either a summary or detail form. The API operation has two parameters, coinId in the path and includeDetails in the query. The Airnode (by design) will not allow the details of the coin to be returned, only the summary. Therefore the Airnode will require a requester to pass a coinId but will ignore the includeDetails parameter if passed. The Airnode will always set the includeDetails query parameter to false regardless of what a requester sends when it calls the API operation. It does so using a fixedOperationParameters when calling the API operation.  Two Airnode Endpoints - One API Operation [#] (#two-airnode-endpoints-one-api-operation)   An Airnode may wish to create two Airnode endpoints mapped to a single API operation whereas the requester does not pass any argument. While the API operation returns any token value based on a path parameter id, Airnode will only allow one particular token per Airnode endpoint. This is done using fixedOOperationParameters rather than normal parameters. By applying a value to fixedOOperationParameters for each Airnode endpoint, only the token in the value can be returned to the requester. json&quot;endpoints&quot;: [ { &quot;name&quot;: &quot;tokenValueAPI3&quot;, // API3 token &quot;operation&quot;: { &quot;method&quot;: &quot;get&quot;, &quot;path&quot;: &quot;/token/{id}&quot; }, ... &quot;fixedOperationParameters&quot;: [ { &quot;name&quot;: &quot;token&quot;, &quot;operationParameter&quot;: { &quot;in&quot;: &quot;path&quot;, &quot;name&quot;: &quot;id&quot; }, &quot;value&quot;:&quot;API#&quot; ... }, { &quot;name&quot;: &quot;tokenValueMATIC&quot;, // MATIC token &quot;operation&quot;: { &quot;method&quot;: &quot;get&quot;, &quot;path&quot;: &quot;/token/{id}&quot; }, ... &quot;fixedOperationParameters&quot;: [ { &quot;name&quot;: &quot;token&quot;, &quot;operationParameter&quot;: { &quot;in&quot;: &quot;path&quot;, &quot;name&quot;: &quot;id&quot; } &quot;value&quot;:&quot;MATIC&quot; ... }, ]  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [Next pageSpecification] (/reference/ois/latest/ois.html)  "}