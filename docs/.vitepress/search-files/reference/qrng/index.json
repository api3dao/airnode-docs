{"id":126,"distPath":"docs/.vitepress/dist/reference/qrng/index.html","indexPath":"docs/.vitepress/search-files/reference/qrng/index.json","docSet":"/reference/qrng/index.html/","url":"/reference/qrng/index.html","content":"  ðŸ“‚Â Reference â†’ QRNG  Understanding QRNG [#] (#frontmatter-title)  ====  The API3 QRNG service is implemented using the Airnode requestâ€“response protocol contract [AirnodeRrpV0] (https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/AirnodeRrpV0.sol) âžš (by way of [RrpRequesterV0.sol] (https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0.sol) âžš ) to acquire a random number. QRNG example project After reading this page, visit and run the QRNG example project in the [qrng-example repo] (https://github.com/api3dao/qrng-example/blob/main/README.md) âžš . In the diagram below a requester (smart contract) submits a request for a quantum random number to the on-chain AirnodeRrpV0 protocol contract using its makeFullRequest() function. The off-chain Airnode gathers the request from the AirnodeRrpV0 protocol contract, gets the random number from an API operation and sends it back to AirnodeRrpV0. Once received, AirnodeRrpV0 performs a callback to the requester with the quantum random number. ![image] (/assets/access-overview.e64d9965.png) Calling AirnodeRrpV0 for a quantum random number is the same as any Airnode RRP request. Read more about how a requester [accesses an Airnode] (/reference/airnode/latest/concepts/airnode.html) to acquire data from API operations.  Requesters [#] (#requesters)  ----  A requester (smart contract) calls the QRNG service using the requestâ€“response protocol (RRP) implemented by the on-chain AirnodeRrpV0 contract. The contract [RrpRequesterV0.sol] (https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0.sol) âžš is meant to be inherited by any requester that will be making requests to AirnodeRrpV0. It is part of the NPM [@api3/airnode-protocol] (https://www.npmjs.com/package/@api3/airnode-protocol) âžš package. In practice, the requester implements two functions that are specific to requesting and receiving a random number from the QRNG service. Consider the following flow (extracted from the [QRNG example contract] (https://github.com/api3dao/qrng-example/blob/main/contracts/QrngExample.sol) âžš ) to understand how to call for a random number. The function makeRequestUint256() calls airnodeRrp.makeFullRequest() to request a random number, which in turn returns a requestId. The requestId is stored in the mapping expectingRequestWithIdToBeFulfilled for reference in the callback function. The requester has a function fulfillUint256 (the function name is user-defined) as the callback to receive the random number from the QRNG service. The callback contains the requestId returned by the initial request and the data, which contains the random number. The requestId is verified and removed from the mapping expectingRequestWithIdToBeFulfilled. solidityimport &quot;@api3/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0.sol&quot;; ... function makeRequestUint256() external { bytes32 requestId = airnodeRrp.makeFullRequest( airnode, endpointIdUint256, address(this), sponsorWallet, address(this), this.fulfillUint256.selector, &quot;&quot; ); expectingRequestWithIdToBeFulfilled[requestId] = true; emit RequestedUint256(requestId); } ... function fulfillUint256(bytes32 requestId, bytes calldata data) external onlyAirnodeRrp { require( expectingRequestWithIdToBeFulfilled[requestId], &quot;Request ID not known&quot; ); expectingRequestWithIdToBeFulfilled[requestId] = false; uint256 qrngUint256 = abi.decode(data, (uint256)); // Do what you want with `qrngUint256` here... emit ReceivedUint256(requestId, qrngUint256); } ...  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 See [QrngExample.sol] (./qrng-example.html) for a complete example. An additional pair of functions ( [makeRequestUint256Array()] (https://github.com/api3dao/qrng-example/blob/main/contracts/QrngExample.sol#L98-L113) âžš and [fulfillUint256Array()] (https://github.com/api3dao/qrng-example/blob/main/contracts/QrngExample.sol#L115-L131) âžš ) can be used to acquire an array of random numbers.  Gas Costs [#] (#gas-costs)  --  Using the QRNG service is free, meaning there is no subscription fee to pay. There is a gas cost incurred on-chain when Airnode places the random number on-chain in response to a request, which the requester needs to pay for. [Next pageChains] (/reference/qrng/chains.html)  "}