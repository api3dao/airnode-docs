{
  "id": 130,
  "distPath": "docs/.vitepress/dist/reference/qrng/remix-example.html",
  "indexPath": "docs/.vitepress/search-files/reference/qrng/remix-example.json",
  "docSet": "/reference/qrng/remix-example.html/",
  "url": "/reference/qrng/remix-example.html",
  "content": "  ðŸ“‚Â Reference â†’ QRNG  RemixQrngExample.sol [#] (#frontmatter-title)  =  This contract is the one included in the [Remix Example Project] (./../guides/remix-example.html) guide. Its only capability is to get a single random number. Additional code would be required to get an array of random numbers, see the [QRNG Example Project] (./../guides/qrng-example.html) . solidity//SPDX-License-Identifier: MIT pragma solidity 0.8.9; import &quot;@api3/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0.sol&quot;; contract RemixQrngExample is RrpRequesterV0 { event RequestedUint256(bytes32 indexed requestId); event ReceivedUint256(bytes32 indexed requestId, uint256 response); address public airnode; bytes32 public endpointIdUint256; address public sponsorWallet; mapping(bytes32 =&gt; bool) public waitingFulfillment; // These are for Remix demonstration purposes, their use is not practical. struct LatestRequest { bytes32 requestId; uint256 randomNumber; } LatestRequest public latestRequest; constructor(address _airnodeRrp) RrpRequesterV0(_airnodeRrp) {} // Normally, this function should be protected, as in: // require(msg.sender == owner, &quot;Sender not owner&quot;); function setRequestParameters( address _airnode, bytes32 _endpointIdUint256, address _sponsorWallet ) external { airnode = _airnode; endpointIdUint256 = _endpointIdUint256; sponsorWallet = _sponsorWallet; } function makeRequestUint256() external { bytes32 requestId = airnodeRrp.makeFullRequest( airnode, endpointIdUint256, address(this), sponsorWallet, address(this), this.fulfillUint256.selector, &quot;&quot; ); waitingFulfillment[requestId] = true; latestRequest.requestId = requestId; latestRequest.randomNumber = 0; emit RequestedUint256(requestId); } function fulfillUint256(bytes32 requestId, bytes calldata data) external onlyAirnodeRrp { require( waitingFulfillment[requestId], &quot;Request ID not known&quot; ); waitingFulfillment[requestId] = false; uint256 qrngUint256 = abi.decode(data, (uint256)); // Do what you want with `qrngUint256` here... latestRequest.randomNumber = qrngUint256; emit ReceivedUint256(requestId, qrngUint256); } }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 [Previous pageQrngExample.sol] (/reference/qrng/qrng-example.html)  [Next pageâ˜… Other Related Reading] (/reference/qrng/more.html)  "
}
