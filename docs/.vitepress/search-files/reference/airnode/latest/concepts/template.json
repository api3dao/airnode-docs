{"id":66,"distPath":"docs/.vitepress/dist/reference/airnode/latest/concepts/template.html","indexPath":"docs/.vitepress/search-files/reference/airnode/latest/concepts/template.json","docSet":"/reference/airnode/latest/","url":"/reference/airnode/latest/concepts/template.html","content":"  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Concepts and Definitions  Template [#] (#frontmatter-title)  ====  An oracle request has many parameters. It is very common for [requesters] (./requester.html) (e.g., a data feed) to make repeated requests with the exact same parameters. In such instances, it is wasteful to pass all of these parameters repeatedly. Templates are on-chain records of request parameters that the requesters can refer to while making requests. Additional advantages are reducing boilerplate code required to make a request, improving UX and allowing large parameter payloads (e.g., off-chain computation specifications) at no additional gas cost. soliditystruct Template { address airnode; bytes32 endpointId; bytes parameters; }  1 2 3 4 5  templateId [#] (#templateid)   Each template is identified by a templateId, which is the hash of its contents. This allows Airnode to fetch templates with a static call, and verify that the received parameters are not tampered with. soliditytemplateId = keccak256(abi.encodePacked( airnode, endpointId, parameters ));  1 2 3 4 5 [Previous pageRequests and Sponsors] (/reference/airnode/latest/concepts/requesters-sponsors.html)  [Next pageRequest] (/reference/airnode/latest/concepts/request.html)  "}