{
  "id": 87,
  "distPath": "docs/.vitepress/dist/reference/airnode/latest/packages/deployer.html",
  "indexPath": "docs/.vitepress/search-files/reference/airnode/latest/packages/deployer.json",
  "docSet": "/reference/airnode/latest/",
  "url": "/reference/airnode/latest/packages/deployer.html",
  "content": "  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Packages  Deployer [#] (#frontmatter-title)  ====  The [airnode-deployer] (https://github.com/api3dao/airnode/tree/v0.8/packages/airnode-deployer) package is used primarily by the [Docker Images] (./../../grp-providers/docker/) . This CLI tool provides the underlying commands used by the Docker images when deploying an Airnode. Deploying an Airnode API providers are strongly encouraged to use the [Docker Images] (./../../grp-providers/docker/) when deploying an Airnode and not the deployer CLI commands.  Usage [#] (#usage)  ----  The deployer&#39;s commands can be run using [npx] (https://www.codingninjas.com/codestudio/library/difference-between-npm-and-npx) , installing a global npm package or by manually building the airnode-deployer package. Using npx is the simplest method to interact with the deployer manually if you do not wish to use the Docker images. --- [Using npx] (./deployer.html#using-npx)  --- [Global Package] (./deployer.html#global-package)  --- [Build Manually] (https://github.com/api3dao/airnode/tree/v0.8/packages/airnode-deployer)   Using npx [#] (#using-npx)   The airnode-deployer package can be run as an npm package using npx. This allows you to run deployer commands without installing the deployer npm package or having to manually build the airnode-deployer package yourself. shnpx @api3/airnode-deployer deploy --config config/config.json --secrets config/secrets.env --receipt config/receipt.json  1  Global Package [#] (#global-package)   The airnode-deployer package can be installed globally with yarn or npm. If installed using yarn make sure yarn bin is added to PATH. shyarn global add @api3/airnode-deployer # OR npm install @api3/airnode-deployer -g # Executing the deployer. airnode-deployer deploy --config config/config.json --secrets config/secrets.env --receipt config/receipt.json  1 2 3 4 5 6  Commands [#] (#commands)     Airnode Deployment [#] (#airnode-deployment)   When creating or updating an Airnode the config.json and secrets.env files are needed. You can use the provided example [config.json] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-deployer/config/config.example.json) and [secrets.env] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-deployer/config/secrets.example.env) templates to get started quickly, but you will need to edit these with your own API details and secrets. Warning about simultaneous deployments Avoid running multiple deployments simultaneously as doing so might result in a broken deployment. If this occurs, the standard removal approach may not succeed and [Manual Removal] (../../grp-providers/docker/deployer-image.html#manual-removal) may be required.  Make sure config.json and secrets.env are available in the path for the --configuration argument.  deploy [#] (#deploy)   When executed, the deploy command defaults to creating a receipt.json file in the config/ directory, although a different path can be specified using the path and name with the --receipt argument. The receipt contains metadata about the deployment and can be used to remove the Airnode. If the deployment isn&#39;t successful, the command will try to automatically remove deployed resources. You can disable this by running the deploy command with a --no-auto-remove argument. bash# Deploys an Airnode instance using the `config.json` and `secrets.env` files. # This can be used for a new deployment or to update an existing deployment. Options: --version Show version number [boolean] --debug Run in debug mode [boolean] [default: false] --help Show help [boolean] -c, --configuration, --config, --conf Path to configuration file [string] [default: &quot;config/config.json&quot;] -s, --secrets Path to secrets file [string] [default: &quot;config/secrets.env&quot;] -r, --receipt Output path for receipt file [string] [default: &quot;config/receipt.json&quot;] --auto-remove Enable automatic removal of deployed resources for failed deployments [boolean] [default: true] # Basic example airnode-deployer deploy # Advanced example airnode-deployer deploy --config config/config.json --secrets config/secrets.env --receipt config/receipt.json  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  Listing Airnodes [#] (#listing-airnodes)   Once you&#39;ve already deployed one or more Airnode, you can list your currently deployed instances using the list command.  list [#] (#list)   By default, the deployer will attempt to list Airnode instances from all the supported cloud providers. You can use the --cloud-providers option to select just the cloud providers you want the deployer to list from. bash# Lists deployed Airnode instances Options: --version Show version number [boolean] --debug Run in debug mode [boolean] [default: false] --help Show help [boolean] -c, --cloud-providers Cloud providers to list Airnodes from [array] [choices: &quot;aws&quot;, &quot;gcp&quot;] [default: [&quot;aws&quot;,&quot;gcp&quot;]] # Basic example airnode-deployer list # Advanced example with cloud provider selection airnode-deployer list --cloud-providers gcp  1 2 3 4 5 6 7 8 9 10 11 12 13  Fetching deployment information [#] (#fetching-deployment-information)   You can use the info command to retrieve information about one of your deployments. The retrieved information include deployment&#39;s Airnode address, stage, Airnode version and the update history.  info [#] (#info)   bash# Displays info about deployed Airnode Positionals: deployment-id ID of the deployment (from &#39;list&#39; command) [string] [required] Options: --version Show version number [boolean] --debug Run in debug mode [boolean] [default: false] --help Show help [boolean] # Example airnode-deployer info aws2c6ef2b3  1 2 3 4 5 6 7 8 9 10 11 12  Airnode Removal [#] (#airnode-removal)   An Airnode can be removed in two different ways: ---Best: With remove, which uses the deployment ID found either in the [deployment receipt file] (./../../reference/deployment-files/receipt-json.html) or via the list command. ---Alternate: With remove-with-receipt, which uses the deployment receipt created when the Airnode was deployed.  remove [#] (#remove)   bash# Removes a deployed Airnode instance Positionals: deployment-id ID of the deployment (from &#39;list&#39; command) [string] [required] Options: --version Show version number [boolean] --debug Run in debug mode [boolean] [default: false] --help Show help [boolean] # Example airnode-deployer remove aws2c6ef2b3  1 2 3 4 5 6 7 8 9 10 11 12  remove-with-receipt [#] (#remove-with-receipt)   bash# Removes a deployed Airnode instance. Options: --version Show version number [boolean] --debug Run in debug mode [boolean] [default: false] --help Show help [boolean] -r, --receipt Path to receipt file [string] [default: &quot;config/receipt.json&quot;] # Basic example airnode-deployer remove-with-receipt # Advanced example specifying the receipt file location airnode-deployer remove-with-receipt --receipt config/receipt.json  1 2 3 4 5 6 7 8 9 10 11 12 13 [Previous pageAdmin CLI] (/reference/airnode/latest/packages/admin-cli.html)  [Next pageValidator] (/reference/airnode/latest/packages/validator.html)  "
}
