{
  "id": 85,
  "distPath": "docs/.vitepress/dist/reference/airnode/latest/packages/admin-cli.html",
  "indexPath": "docs/.vitepress/search-files/reference/airnode/latest/packages/admin-cli.json",
  "docSet": "/reference/airnode/latest/",
  "url": "/reference/airnode/latest/packages/admin-cli.html",
  "content": "  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Packages  Admin CLI [#] (#frontmatter-title)    Use the [airnode-admin] (https://github.com/api3dao/airnode/tree/v0.8/packages/airnode-admin) Admin CLI tool to interact with Airnode across blockchains. There are commands for both developers (dApp) and API providers. Developers can sponsor [requester] (./../../concepts/requester.html) contracts and derive [sponsorWallets] (./../../concepts/sponsor.html#sponsorwallet) for Airnodes. API providers can build [Airnodes] (./../../concepts/airnode.html) that serve their API data to requester contracts. Transaction Gas Costs Some commands will incur transaction fees. These are per call transaction gas costs and are relatively small. See the [Developer Fees] (./../../grp-developers/fees.html) doc. Almost all commands require you to provide a blockchain providerUrl. Following are just two examples of many possibilities. See the [Chain Providers] (./../../concepts/chain-providers.html) doc for more information. --- [https://eth-goerli.gateway.pokt.network/v1/lb/] (https://eth-goerli.gateway.pokt.network/v1/lb/) &lt;APP_ID&gt; ---https://sepolia.infura.io/v3/&lt;KEY&gt; The CLI connects to the [AirnodeRrpV0.sol] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-protocol/contracts/rrp/AirnodeRrpV0.sol) or the [RequesterAuthorizerWithAirnode.sol] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-protocol/contracts/authorizers/RequesterAuthorizerWithAirnode.sol) contract, which addresses are derived from the current chain. You can optionally specify the contract addresses yourself by providing optional airnode-rrp-address or requester-authorizer-with-airnode command argument with the address of the deployed contract on your targeted chain. Commands that require mnemonic will make an on-chain transaction. The application will derive the account from the mnemonic with default ethereum derivation path m/44&#39;/60&#39;/0&#39;/0/0. You can override this by using the optional parameter derivation-path (m/44&#39;/60&#39;/0&#39;/0/...). Make sure that the wallet that is associated with the mnemonic is funded on the target chain. The application will not exit until the transaction is confirmed.  Using transaction overrides [#] (#using-transaction-overrides)   CLI commands also support the following transaction overrides as optional arguments: gas-limit, gas-price (legacy transactions), max-fee and max-priority-fee (EIP-1559 transactions) and nonce.  Default transaction overrides [#] (#default-transaction-overrides)   If no overrides are provided, transactions will default to the following values: EIP-1559 transactions shmaxPriorityFeePerGas: 3.12 gwei maxFeePerGas: baseFeePerGas of the last block * 2 + maxPriorityFeePerGas  1 2 Legacy transactions shgasPrice: gasPrice returned by the ethers getGasPrice method  1  Using npx [#] (#using-npx)  --  View all commands: shnpx @api3/airnode-admin --help  1 View the parameters of a command: shnpx @api3/airnode-admin $COMMAND --help  1  Using Docker [#] (#using-docker)  ---  Use the Admin CLI docker image as an alternative to npx: shdocker run api3/airnode-admin:0.10.0 --help  1 View the parameters of a command: shdocker run api3/airnode-admin:0.10.0 $COMMAND --help  1  SDK [#] (#sdk)    You can also use the package programmatically. The SDK exports respective functions for all CLI commands as well as helper functions for obtaining the contract instance on the targeted chain. jsimport { sponsorRequester, getAirnodeRrpWithSigner } from &#39;@api3/airnode-admin&#39;; // First obtain the contract instance on target chain const airnodeRrp = await getAirnodeRrpWithSigner( mnemonic, derivation - path, providerUrl, airnodeRrpAddress ); // Pass the contract instance as the first argument to the SDK function const requester = await sponsorRequester(airnodeRrp, requester);  1 2 3 4 5 6 7 8 9 10 11 If you plan to use multiple commands it might be tedious to pass the contract instance to every function call. For this reason there is also class based AdminSdk which you initialize with AirnodeRrp contract only once. jsimport { AdminSdk } from &#39;@api3/airnode-admin&#39;; // First initialize the SDK with AirnodeRrpV0 contract instance. // You can use static AdminSdk functions or provide your own instance. const airnodeRrp = await AdminSdk.getAirnodeRrpWithSigner( mnemonic, derivation - path, providerUrl, airnodeRrpAddress ); // Create sdk instance const adminSdk = new AdminSdk(airnodeRrp); // Call the method you need const requester = await adminSdk.sponsorRequester(requester); // You can switch the contract instance anytime. E.g. if you are using ethers adminSdk.airnodeRrp = airnodeRrp.connect(someOtherWallet);  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 The SDK will also provide TS typings out of the box. Please, refer to the implementation for more details.  Using transaction overrides [#] (#using-transaction-overrides-1)   You can also use transaction overrides to customize gas limits and fee settings. The SDK simply passes the overrides parameter to the contract method so you can use any overrides supported by the ethers library. jsimport { ethers } from &#39;ethers&#39;; // Legacy transaction overrides const overrides = { gasLimit: ethers.BigNumber.from(&#39;200000&#39;), gasPrice: ethers.utils.parseUnits(&#39;20&#39;, &#39;gwei&#39;) }; // EIP-1559 transaction overrides const overrides = { gasLimit: ethers.BigNumber.from(&#39;200000&#39;), maxFeePerGas: ethers.utils.parseUnits(&#39;20&#39;, &#39;gwei&#39;) maxPriorityFeePerGas: ethers.utils.parseUnits(&#39;10&#39;, &#39;gwei&#39;) }; // The transaction overrides parameter is optional and can be passed in as the last parameter const requester = await adminSdk.sponsorRequester(requester, overrides);  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  Sponsors [#] (#sponsors)    Commands related to a [sponsor&#39;s] (./../../concepts/sponsor.html) relationships between [requesters] (./../../concepts/requester.html) and [sponsorWallets] (./../../concepts/sponsor.html#sponsorwallet) as well as [templates] (./../../concepts/template.html) used by a sponsor&#39;s requesters. Some of these commands connect to the [AirnodeRrpV0.sol] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-protocol/contracts/rrp/AirnodeRrpV0.sol) protocol contract where the signer is sponsor account. --- [sponsor-requester] (./admin-cli.html#sponsor-requester)  --- [unsponsor-requester] (./admin-cli.html#unsponsor-requester)  --- [get-sponsor-status] (./admin-cli.html#get-sponsor-status)  --- [derive-sponsor-wallet-address] (./admin-cli.html#derive-sponsor-wallet-address)  --- [create-template] (./admin-cli.html#create-template)  --- [create-inline-template] (./admin-cli.html#create-inline-template)  --- [get-template] (./admin-cli.html#get-template)  --- [request-withdrawal] (./admin-cli.html#request-withdrawal)  --- [check-withdrawal-request] (./admin-cli.html#check-withdrawal-request)  --- [verify-airnode-xpub] (./admin-cli.html#verify-airnode-xpub)   sponsor-requester [#] (#sponsor-requester)   [Sponsors] (./../../concepts/sponsor.html) a [requester] (./../../concepts/requester.html) contract so that its requests can be fulfilled by the [sponsorWallet] (./../../concepts/sponsor.html#sponsorwallet) of an Airnode. The account derived from the mnemonic you provide must belong to the sponsor. Sponsoring a requester and using the returned sponsorAddress to derive a sponsorWallet for an Airnode creates a [relationship] (./../../concepts/sponsor.html) between the requester and the Airnode, see the [derive-sponsor-wallet-address] (./admin-cli.html#derive-sponsor-wallet-address) command. ---provider-url: A valid blockchain provider URL. ---sponsor-mnemonic: A wallet owned by the sponsor. Used to derive a sponsorAddress as the default account of the mnemonic unless a derivation-path is specified. It&#39;s also used to pay gas costs from the mnemonic&#39;s default account unless a derivation-path is specified. ---requester-address: The contract address of the requester to sponsor. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. If this parameter is not provided, it will be deduced from the current chain. If there is no RRP address found for the given chain an error is thrown. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin sponsor-requester \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --sponsor-mnemonic &quot;nature about salad...&quot; \\ --requester-address 0x2c2e12...  1 2 3 4 @tab:Windows batchnpx @api3/airnode-admin sponsor-requester ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --sponsor-mnemonic &quot;nature about salad...&quot; ^ --requester-address 0x2c2e12...  1 2 3 4  unsponsor-requester [#] (#unsponsor-requester)   Removes the sponsorship of a [requester] (./../../concepts/requester.html) contract so that its requests can no longer be fulfilled by the [sponsorWallet] (./../../concepts/sponsor.html#sponsorwallet) . The account derived from the mnemonic you provide here has to belong to the sponsor. ---provider-url: A valid blockchain provider URL. ---sponsor-mnemonic: A wallet owned by the sponsor. Must be the mnemonic used to sponsor the requester. Used to pay gas costs from the mnemonic&#39;s default account unless a derivation-path is specified. ---requester-address: The contract address of the requester to unsponsor. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 bashnpx @api3/airnode-admin unsponsor-requester \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --sponsor-mnemonic &quot;nature about salad...&quot; \\ --requester-address 0x2c2e12...  1 2 3 4 @tab:Windows batchnpx @api3/airnode-admin unsponsor-requester ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --sponsor-mnemonic &quot;nature about salad...&quot; ^ --requester-address 0x2c2e12...  1 2 3 4  get-sponsor-status [#] (#get-sponsor-status)   Returns the sponsor status for a given [sponsor] (./../../concepts/sponsor.html) and [requester] (./../../concepts/requester.html) (true if sponsored, false otherwise). ---provider-url: A valid blockchain provider URL. ---sponsor-address: The sponsorAddress returned when the requester was sponsored. ---requester-address: The requester contract address. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin get-sponsor-status \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --sponsor-address 0x9Ec6C4... \\ --requester-address 0x2c2e12...  1 2 3 4 @tab:Windows batchnpx @api3/airnode-admin get-sponsor-status ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --sponsor-address 0x9Ec6C4... ^ --requester-address 0x2c2e12...  1 2 3 4  derive-sponsor-wallet-address [#] (#derive-sponsor-wallet-address)   Derives the address of the wallet designated by an Airnode for a [sponsor] (./../../concepts/sponsor.html) , which is called the [sponsorWallet] (./../../concepts/sponsor.html#sponsorwallet) . This command will error if airnode-xpub does not belong to the HDNode with the path m/44&#39;/60&#39;/0&#39; of the Airnode wallet. See the [derive-airnode-xpub] (./admin-cli.html#derive-airnode-xpub) command. ---airnode-xpub: The extended public address of the Airnode for path m/44&#39;/60&#39;/0&#39;. ---airnode-address: The public address of the Airnode. ---sponsor-address: The address of the sponsor account. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin derive-sponsor-wallet-address \\ --airnode-xpub xpub6CUGRUo... \\ --airnode-address 0xe1e0dd... \\ --sponsor-address 0x9Ec6C4...  1 2 3 4 @tab:Windows batchnpx @api3/airnode-admin derive-sponsor-wallet-address ^ --airnode-xpub xpub6CUGRUo... ^ --airnode-address 0xe1e0dd... ^ --sponsor-address 0x9Ec6C4...  1 2 3 4  create-template [#] (#create-template)   Reads a file, uses its contents to create a [template] (./../../concepts/template.html) and returns a template-id. Also see [Using Templates] (./../../grp-developers/using-templates.html) for an example template file. ---provider-url: A valid blockchain provider URL. ---mnemonic: Used to pay gas costs from the mnemonic&#39;s default account unless a derivation-path is specified. ---template-file-path: Path to the template file to create on-chain. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin create-template \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --mnemonic &quot;nature about salad...&quot; \\ --template-file-path ./template.json  1 2 3 4 @tab:Windows batchnpx @api3/airnode-admin create-template ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --mnemonic &quot;nature about salad...&quot; ^ --template-file-path ./template.json  1 2 3 4  create-inline-template [#] (#create-inline-template)   It is possible to inline Airnode templates inside config.json in a templates section. These templates need to be published on chain, but inlining them inside config provides more clarity which templates can be used for template requests and also saves a blockchain call . The command reads a template file, uses its contents to create a [template] (./../../concepts/template.html) and returns the data necessary to inline the template inside config. See [Using Templates] (./../../grp-developers/using-templates.html) for an example template file. This command does not create a template on chain. Be sure to use the [create-template] (./admin-cli.html#create-template) command on chain before making template requests. ---template-file-path: Path to the template file to create on-chain. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin create-inline-template \\ --template-file-path ./template.json  1 2 @tab:Windows batchnpx @api3/airnode-admin create-inline-template ^ --template-file-path ./template.json  1 2  get-template [#] (#get-template)   Returns the [template] (./../../concepts/template.html) for the given template-id. ---provider-url: A valid blockchain provider URL. ---template-id: The id of a template to return. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin get-template \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --template-id 0x8d3b9...  1 2 3 @tab:Windows batchnpx @api3/airnode-admin get-template ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --template-id 0x8d3b9...  1 2 3  request-withdrawal [#] (#request-withdrawal)   Requests a [withdrawal] (./../../concepts/sponsor.html#withdrawals) from a [sponsorWallet] (./../../concepts/sponsor.html#sponsorwallet) managed by an Airnode. The funds will be returned to the account derived from the sponsor-mnemonic. This account must belong to a [sponsor] (./../../concepts/sponsor.html) for the specified [sponsor wallet address] (./../../concepts/sponsor.html#sponsorwallet) in the command. After the request is made, it needs to be fulfilled by Airnode, so the return value of this command is only a withdrawal-request-id which you can use to call [check-withdrawal-request] (./admin-cli.html#check-withdrawal-request) to see whether the request was processed or not. Withdrawal Priority Airnode will drop any pending API calls associated with a sponsorWallet once a withdrawal is requested. ---provider-url: A valid blockchain provider URL. ---sponsor-mnemonic: A wallet owned by the sponsor. Used to pay gas costs from the mnemonic&#39;s default account unless a derivation-path is specified. Withdrawn funds will be added to this mnemonic&#39;s default address unless a derivation-path is specified. ---airnode-address: The public address of the Airnode. ---sponsor-wallet-address: The pubic address of the sponsorWallet to withdraw from. This address was returned by the derive-sponsor-wallet-address command. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. ---derivation-path (optional) : The destination address of the mnemonic parameter to add the withdrawn funds to if the default address is not desired. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin request-withdrawal \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --sponsor-mnemonic &quot;nature about salad...&quot; \\ --airnode-address 0xe1e0dd... \\ --sponsor-wallet-address 0x9Ec6C4...  1 2 3 4 5 @tab:Windows batchnpx @api3/airnode-admin request-withdrawal ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --sponsor-mnemonic &quot;nature about salad...&quot; ^ --airnode-address 0xe1e0dd... ^ --sponsor-wallet-address 0x9Ec6C4...  1 2 3 4 5  check-withdrawal-request [#] (#check-withdrawal-request)   Checks the status of the [withdrawal] (./../../concepts/sponsor.html#withdrawals) request with the given withdrawal-request-id from the [request withdrawal command] (./admin-cli.html#request-withdrawal) above. ---provider-url: A valid blockchain provider URL. ---withdrawal-request-id: This id was returned by the request-withdrawal command. ---airnode-rrp-address (optional): The public address of the AirnodeRrpV0.sol protocol contract. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin check-withdrawal-request \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --withdrawal-request-id 0x011d1b...  1 2 3 @tab:Windows batchnpx @api3/airnode-admin check-withdrawal-request ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --withdrawal-request-id 0x011d1b...  1 2 3  verify-airnode-xpub [#] (#verify-airnode-xpub)   Verifies that the airnode-xpub belongs to the HDNode with the path m/44&#39;/60&#39;/0&#39; of the Airnode wallet. This command checks that the Airnode address can be derived with provided Airnode [xpub] (./../../concepts/airnode.html#xpub) with default derivation path m/44&#39;/60&#39;/0&#39;/0/0 and compares it with the airnode-address. This command will most likely be used by a [sponsor] (./../../concepts/sponsor.html) to verify that the xpub belongs to the Airnode before calling the [derive-sponsor-wallet-address] (./admin-cli.html#derive-sponsor-wallet-address) command. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin verify-airnode-xpub \\ --airnode-xpub xpub6CUGRUo... \\ --airnode-address 0xe1e0dd...  1 2 3 @tab:Windows batchnpx @api3/airnode-admin verify-airnode-xpub ^ --airnode-xpub xpub6CUGRUo... ^ --airnode-address 0xe1e0dd...  1 2 3  Airnodes [#] (#airnodes)    Helper commands for a previously deployed Airnode. Some of these commands connect to the AirnodeRrpV0.sol protocol contract where the signer must be the Airnode wallet. --- [derive-airnode-xpub] (./admin-cli.html#derive-airnode-xpub)  --- [derive-endpoint-id] (./admin-cli.html#derive-endpoint-id)  --- [generate-airnode-mnemonic] (./admin-cli.html#generate-airnode-mnemonic)  --- [derive-airnode-address] (./admin-cli.html#derive-airnode-address)   derive-airnode-xpub [#] (#derive-airnode-xpub)   Derives the Airnode extended public key ( [xpub] (./../../concepts/airnode.html#xpub) ). This xpub must be announced via off-chain channels because it will be needed to derive a [sponsorWallet] (./../../concepts/sponsor.html#sponsorwallet) address. See the [derive-sponsor-wallet-address] (./admin-cli.html#derive-sponsor-wallet-address) command. ---airnode-mnemonic: The Airnode mnemonic for which the xpub is to be derived. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin derive-airnode-xpub --airnode-mnemonic &quot;nature about salad...&quot;  1 @tab:Windows batchnpx @api3/airnode-admin derive-airnode-xpub --airnode-mnemonic &quot;nature about salad...&quot;  1  derive-endpoint-id [#] (#derive-endpoint-id)   Derives an [endpointId] (./../deployment-files/config-json.html#triggers) from the OIS title and the endpoint&#39;s name. This command uses the convention described in the [triggers] (./../../grp-providers/guides/build-an-airnode/configuring-airnode.html#triggers) section of the configuring airnode documentation. Add the endpointId to the config.json file (triggers.rrp[n].endpointId). ---ois-title: The title of the OIS from config.json (ois.title). ---endpoint-name: The name of the endpoint from config.json (triggers.rrp[n].endpointName). @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin derive-endpoint-id \\ --ois-title &quot;My OIS title...&quot; \\ --endpoint-name &quot;My endpoint name...&quot;  1 2 3 @tab:Windows batchnpx @api3/airnode-admin derive-endpoint-id ^ --ois-title &quot;My OIS title...&quot; ^ --endpoint-name &quot;My endpoint name...&quot;  1 2 3  generate-airnode-mnemonic [#] (#generate-airnode-mnemonic)   Generates a unique mnemonic which can be used to create an [airnode wallet] (./../../grp-providers/guides/build-an-airnode/configuring-airnode.html#airnodewalletmnemonic) . In addition to the mnemonic, this command will also display the corresponding [airnode address] (./../../concepts/airnode.html#airnodeaddress) and its extended public key ( [xpub] (./../../concepts/airnode.html#xpub) ). shnpx @api3/airnode-admin generate-airnode-mnemonic  1  generate-mnemonic [#] (#generate-mnemonic)   Generates a unique mnemonic which can be used to create a wallet. In addition to the mnemonic, this command will also display the corresponding default wallet (path:m/44&#39;/60&#39;/0&#39;/0/0) address. shnpx @api3/airnode-admin generate-mnemonic  1  derive-airnode-address [#] (#derive-airnode-address)   Derives the [airnode address] (./../../concepts/airnode.html#airnodeaddress) which is the identifier of the particular Airnode on chain. The address is the default address of a BIP 44 wallet (with the path m/44&#39;/60&#39;/0&#39;/0/0). Use this identifier for many other admin CLI commands, such as [derive-sponsor-wallet-address] (./admin-cli.html#derive-sponsor-wallet-address) . ---airnode-mnemonic: A mnemonic used to generate the airnode address. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin derive-airnode-address \\ --airnode-mnemonic &quot;cricket among ...&quot;  1 2 @tab:Windows batchnpx @api3/airnode-admin derive-airnode-address ^ --airnode-mnemonic &quot;cricket among ...&quot;  1 2  RequesterAuthorizerWithAirnode [#] (#requesterauthorizerwithairnode)  ----  RequesterAuthorizerWithAirnode contract was written by API3 as an [authorizer] (./../../concepts/authorizers.html) contract that can be used by any Airnode. Airnode owners can use this contract in addition to authorizer contracts they have written themselves. This authorizer contract can whitelist [requesters] (./../../concepts/requester.html) where each Airnode is adminned by themselves. These commands connect to the [RequesterAuthorizerWithAirnode.sol] (https://github.com/api3dao/airnode/blob/v0.8/packages/airnode-protocol/contracts/authorizers/RequesterAuthorizerWithAirnode.sol) contract. --- [set-whitelist-expiration] (./admin-cli.html#set-whitelist-expiration)  --- [extend-whitelist-expiration] (./admin-cli.html#extend-whitelist-expiration)  --- [set-indefinite-whitelist-status] (./admin-cli.html#set-indefinite-whitelist-status)  --- [get-whitelist-status] (./admin-cli.html#get-whitelist-status)  --- [is-requester-whitelisted] (./admin-cli.html#is-requester-whitelisted)   set-whitelist-expiration [#] (#set-whitelist-expiration)   Called by the Airnode wallet or a whitelist expiration setter to set the whitelisting expiration of a requester for the Airnodeâ€“endpoint pair. This can hasten expiration in the case the new expiration timestamp is prior to a previously set timestamp. ---mnemonic: Used to pay gas costs from the mnemonic&#39;s default account unless a derivation-path is specified. The mnemonic must be at least an Admin or Airnode wallet. ---provider-url: A valid blockchain provider URL. ---endpoint-id: The [endpointId] (./../deployment-files/config-json.html#triggers) for which permission is granted (from OIS). ---requester-address: The public address of the requester contract. ---expiration-timestamp: A unix formatted timestamp. ---airnode-address: The public address of the Airnode. ---requester-authorizer-with-airnode (optional): The authorizer contract address. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin set-whitelist-expiration \\ --mnemonic &quot;nature about salad...&quot; \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --endpoint-id 0xda088e2d94... \\ --requester-address 0x2c2e12... \\ --expiration-timestamp 1947451793 \\ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7 @tab:Windows batchnpx @api3/airnode-admin set-whitelist-expiration ^ --mnemonic &quot;nature about salad...&quot; ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --endpoint-id 0xda088e2d94... ^ --requester-address 0x2c2e12... ^ --expiration-timestamp 1947451793 ^ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7  extend-whitelist-expiration [#] (#extend-whitelist-expiration)   Called by the Airnode wallet or a whitelist expiration extender to extend the whitelist expiration of a requester for the Airnodeâ€“endpoint pair. This command expects that the new expiration timestamp is later then the previously set timestamp. ---mnemonic: Used to pay on-chain gas cost for this command&#39;s transaction. The mnemonic must be at least an Admin or Airnode wallet. ---provider-url: A valid blockchain provider URL. ---endpoint-id: The [endpointId] (./../deployment-files/config-json.html#triggers) for which permission is granted (from OIS). ---requester-address: The public address of the requester contract. ---expiration-timestamp: A unix formatted timestamp. ---airnode-address: The public address of the Airnode. ---requester-authorizer-with-airnode (optional): The authorizer contract address. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin extend-whitelist-expiration \\ --mnemonic &quot;nature about salad...&quot; \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --endpoint-id 0xda088e2d94... \\ --requester-address 0x2c2e12... \\ --expiration-timestamp 1947451793 \\ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7 @tab:Windows batchnpx @api3/airnode-admin extend-whitelist-expiration ^ --mnemonic &quot;nature about salad...&quot; ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --endpoint-id 0xda088e2d94... ^ --requester-address 0x2c2e12... ^ --expiration-timestamp 1947451793 ^ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7  set-indefinite-whitelist-status [#] (#set-indefinite-whitelist-status)   Called by the Airnode wallet or an indefinite whitelister to whitelist a requester indefinitely for the Airnodeâ€“endpoint pair. This command can be used to make whitelisting permanent in cases where it is needed to allow requests even beyond the expiration period. ---mnemonic: Used to pay on-chain gas cost for this command&#39;s transaction. The mnemonic must be at least an Admin or Airnode wallet. The default address of the mnemonic will be used unless a derivation-path is provided. ---provider-url: A valid blockchain provider URL. ---endpoint-id: The [endpointId] (./../deployment-files/config-json.html#triggers) for which permission is granted (from OIS). ---requester-address: The public address of the requester contract. ---expiration-timestamp: A unix formatted timestamp. ---airnode-address: The public address of the Airnode. ---requester-authorizer-with-airnode (optional): The authorizer contract address. ---derivation-path (optional): Selects an alternate account to use from the mnemonic rather than the default. ---indefinite-whitelist-status: Whether the Airnode-endpoint pair should be whitelisted indefinitely or not. ---gas-limit (optional): The gas limit to use for the transaction. ---gas-price (optional): The gas price (in gwei) to use for the transaction (only for legacy transactions). ---max-fee (optional): The maximum fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---max-priority-fee (optional): The maximum priority fee (in gwei) per gas to use for the transaction (only for EIP-1559 transactions). ---nonce (optional): The nonce to use for the transaction. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin set-indefinite-whitelist-status \\ --mnemonic &quot;nature about salad...&quot; \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --endpoint-id 0xda088e2d94... \\ --requester-address 0x2c2e12... \\ --whitelist-status-past-expiration true \\ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7 @tab:Windows batchnpx @api3/airnode-admin set-indefinite-whitelist-status ^ --mnemonic &quot;nature about salad...&quot; ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --endpoint-id 0xda088e2d94... ^ --requester-address 0x2c2e12... ^ --whitelist-status-past-expiration true ^ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 7  get-whitelist-status [#] (#get-whitelist-status)   Called to get the detailed whitelist status of a requester for the Airnodeâ€“endpoint pair. ---provider-url: A valid blockchain provider URL. ---endpoint-id: The [endpointId] (./../deployment-files/config-json.html#triggers) for which permission is granted (from OIS). ---requester-address: The public address of the requester contract. ---airnode-address: The public address of the Airnode. ---requester-authorizer-with-airnode (optional): The authorizer contract address. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin get-whitelist-status \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --endpoint-id 0xda088e2d94... \\ --requester-address 0x2c2e12... \\ --airnode-address 0xe1e0dd...  1 2 3 4 5 @tab:Windows batchnpx @api3/airnode-admin get-whitelist-status ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --endpoint-id 0xda088e2d94... ^ --requester-address 0x2c2e12... ^ --airnode-address 0xe1e0dd...  1 2 3 4 5  is-requester-whitelisted [#] (#is-requester-whitelisted)   Called to check if a requester is whitelisted to use the Airnodeâ€“endpoint pair. ---provider-url: A valid blockchain provider URL. ---requester-authorizer-with-airnode: The authorizer contract address. ---endpoint-id: The [endpointId] (./../deployment-files/config-json.html#triggers) for which permission is granted (from OIS). ---requester-address: The public address of the requester contract. ---airnode-address: The public address of the Airnode. @tab:Linux/Mac/WSL2 shnpx @api3/airnode-admin is-requester-whitelisted \\ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; \\ --requester-authorizer-with-airnode 0xDc64a1... \\ --endpoint-id 0xda088e2d94... \\ --requester-address 0x2c2e12... \\ --airnode-address 0xe1e0dd...  1 2 3 4 5 6 @tab:Windows batchnpx @api3/airnode-admin is-requester-whitelisted ^ --provider-url https://eth-goerli.gateway.pokt.network/v1/lb/&lt;APP_ID&gt; ^ --requester-authorizer-with-airnode 0xDc64a1... ^ --endpoint-id 0xda088e2d94... ^ --requester-address 0x2c2e12... ^ --airnode-address 0xe1e0dd...  1 2 3 4 5 6  More Examples [#] (#more-examples)    You can find more examples in the @api3-dao/airnode/package/admin [test files] (https://github.com/api3dao/airnode/tree/v0.8/packages/airnode-admin/test) . [Previous pageAirnode ABI] (/reference/airnode/latest/packages/airnode-abi.html)  [Next pageDeployer] (/reference/airnode/latest/packages/deployer.html)  "
}
