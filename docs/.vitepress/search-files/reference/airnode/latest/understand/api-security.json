{
  "id": 94,
  "distPath": "docs/.vitepress/dist/reference/airnode/latest/understand/api-security.html",
  "indexPath": "docs/.vitepress/search-files/reference/airnode/latest/understand/api-security.json",
  "docSet": "/reference/airnode/latest/",
  "url": "/reference/airnode/latest/understand/api-security.html",
  "content": "  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Understanding Airnode  API Security [#] (#frontmatter-title)  ===  Airnode can pass along security information (schemes) when making calls to API operations. There are two groups of security schemes. --- [Airnode Authentication] (./../../../concepts/airnode-auth.html)  --- [Relayed Meta Data Authentication] (./../../../concepts/relay-meta-auth.html)  ![image] (/assets/security-schemes.3c17e97a.png) The Airnode uses Airnode Authentication Security Schemes to authenticate itself to an API operation of which the values are known only by the Airnode. The Airnode uses Relayed Meta Data Security Schemes to forward known information from the requester&#39;s request to an API operation. Security schemes are declared by the required type property inside the security scheme definition. The following security scheme types are supported. Airnode Authentication Security Schemes -apiKey -http Relayed Meta Data Security Schemes -relayRequesterAddress -relayChainId -relayChainType -relaySponsorAddress -relaySponsorWalletAddress -relayRequestId  Airnode Authentication Security Schemes [#] (#airnode-authentication-security-schemes)  --  An Airnode can use the following security scheme types to authenticate itself to API operations. --- [apiKey] (./api-security.html#apikey)  --- [http] (./api-security.html#http)   apiKey [#] (#apikey)   The apiKey security scheme type allows you to define an API key the Airnode will send to your API operations. It is an object which consists of the following fields: type must be apiKey in can be one of the query, header or cookie. This value specifies how should the value be sent to your API. When using the query option, the API key will be sent in the request body for POST requests and in query string for GET requests. name is the name of the API key that should be sent to your API. For example &quot;X-Api-Key&quot;. json{ &quot;requiresXApiKey&quot;: { &quot;in&quot;: &quot;header&quot;, &quot;type&quot;: &quot;apiKey&quot;, &quot;name&quot;: &quot;X-api-key&quot; } }  1 2 3 4 5 6 7 The value of the apiKey goes in the apiCredentials field of config.json. Normally the value is accessed using interpolation from the secrets.env file. json{ &quot;oisTitle&quot;: &quot;Ois Title&quot;, &quot;securitySchemeName&quot;: &quot;requiresXApiKey&quot;, &quot;securitySchemeValue&quot;: &quot;${X_API_KEY}&quot; // interpolated from secrets.env }  1 2 3 4 5  http [#] (#http)   The http security scheme type allows you to define a basic or bearer authentication. This security scheme will always be sent in the headers. The security scheme value should be base64 encoded value &quot;username:password&quot; for basic auth and the encoded token for bearer auth. It is an object which consists of the following fields: ---type must be http ---scheme is either basic or bearer json{ &quot;requiresBasicAuth&quot;: { &quot;scheme&quot;: &quot;basic&quot;, &quot;type&quot;: &quot;http&quot; } }  1 2 3 4 5 6 The value of the http as (basic or bearer) goes in the apiCredentials field of config.json. Normally the value is accessed using interpolation from the secrets.emv file. json{ &quot;oisTitle&quot;: &quot;Ois Title&quot;, &quot;securitySchemeName&quot;: &quot;requiresBasicAuth&quot;, &quot;securitySchemeValue&quot;: &quot;${BASE_64_ENCODED_BASIC_AUTH}&quot; // interpolated from secrets.env }  1 2 3 4 5 Authentication Tutorial The authenticated-coinmarketcap monorepo example demonstrates authentication, [see here] (./../../tutorial/README.html#monorepo-examples) .  Relayed Meta Data Security Schemes [#] (#relayed-meta-data-security-schemes)  --  In addition to authenticating itself, Airnode can &quot;relay&quot; security information about a request to an API operation. This is different then [Authorization] (./apply-auth.html) of requesters to access the Airnode. --- [relayRequesterAddress] (./api-security.html#relayrequesteraddress)  --- [relayChainId] (./api-security.html#relaychainid)  --- [relayChainType] (./api-security.html#relaychaintype)  --- [relaySponsorAddress] (./api-security.html#relaysponsoraddress)  --- [relaySponsorWalletAddress] (./api-security.html#relaysponsorwalletaddress)  --- [relayRequestId] (./api-security.html#relayrequestid)  For relayed meta data security schemes you do not provide any values in [apiCredentials] (./../../../reference/deployment-files/config-json.html#apicredentials) as they are extracted from the request by Airnode. Additional Processing Logic Note that Airnode is just relaying metadata to your API operations and does not perform any additional logic. You must implement any desired logic in your API operations. See [Relayed Meta Data Authentication] (./../../../concepts/relay-meta-auth.html) for overview of its usage. Relay Metadata Tutorial The relay-security-schemes monorepo example demonstrates how to relay multiple request metadata like chain ID and sponsor address to the API endpoint, [see here] (./../../tutorial/README.html#monorepo-examples) .  relayRequesterAddress [#] (#relayrequesteraddress)   The relayRequesterAddress security scheme type instructs Airnode to forward the [requester] (./../../../concepts/requester.html) address. json{ &quot;in&quot;: &quot;header&quot;, &quot;type&quot;: &quot;relayRequesterAddress&quot;, &quot;name&quot;: &quot;requesterAddress&quot; }  1 2 3 4 5  relayChainId [#] (#relaychainid)   The relayChainId security scheme type instructs Airnode to forward the chain&#39;s ID. json{ &quot;in&quot;: &quot;query&quot;, &quot;type&quot;: &quot;relayChainId&quot;, &quot;name&quot;: &quot;chainId&quot; }  1 2 3 4 5  relayChainType [#] (#relaychaintype)   The relayChainType security scheme type instructs Airnode to forward the chain&#39;s type. json{ &quot;in&quot;: &quot;query&quot;, &quot;type&quot;: &quot;relayChainType&quot;, &quot;name&quot;: &quot;chainType&quot; }  1 2 3 4 5  relaySponsorAddress [#] (#relaysponsoraddress)   The relaySponsorAddress security scheme type instructs Airnode to forward the [sponsor address] (./../../../concepts/sponsor.html#sponsoraddress) . json{ &quot;in&quot;: &quot;query&quot;, &quot;type&quot;: &quot;relaySponsorAddress&quot;, &quot;name&quot;: &quot;sponsorAddress&quot; }  1 2 3 4 5  relaySponsorWalletAddress [#] (#relaysponsorwalletaddress)   The relaySponsorWalletAddress security scheme type instructs Airnode to forward the [sponsor wallet address] (./../../../concepts/sponsor.html#sponsorwallet) . json{ &quot;in&quot;: &quot;query&quot;, &quot;type&quot;: &quot;relaySponsorWalletAddress&quot;, &quot;name&quot;: &quot;sponsorWalletAddress&quot; }  1 2 3 4 5  relayRequestId [#] (#relayrequestid)   The relayRequestId security scheme type instructs Airnode to forward the [id of the request] (./../../../concepts/request.html#requestid) . json{ &quot;in&quot;: &quot;query&quot;, &quot;type&quot;: &quot;relayRequestId&quot;, &quot;name&quot;: &quot;requestId&quot; }  1 2 3 4 5  Example [#] (#example)  ---  OIS security is inspired by OAS security practices. This is implemented using the security schemes and security field. All supported security schemes are described in detail in the [Airnode Authentication Security Schemes] (./api-security.html#airnode-authentication-security-schemes) and [Relayed Meta Data Security Schemes] (./api-security.html#relayed-meta-data-security-schemes) sections above. The following example is related to Airnode Authentication Security Schemes. Working with security schemes can be described in three steps. 1-- [Define the security schemes for an OIS] (./api-security.html#step-1-define-the-security-schemes-for-an-ois)  2-- [Turn on the defined security schemes] (./api-security.html#step-2-turn-on-the-defined-security-schemes)  3-- [Specify the values for the defined security schemes] (./api-security.html#step-3-specify-the-values-for-the-defined-security-schemes)  Following is an example of a partial config.json which demonstrates the usage of security scheme and security field. json{ &quot;ois&quot;: [ { &quot;title&quot;: &quot;My OIS title&quot;, &quot;apiSpecifications&quot;: { &quot;components&quot;: { &quot;securitySchemes&quot;: { &quot;requiresXApiKey&quot;: { &quot;in&quot;: &quot;header&quot;, &quot;type&quot;: &quot;apiKey&quot;, &quot;name&quot;: &quot;X-api-key&quot; } } }, &quot;security&quot;: { &quot;requiresXApiKey&quot;: [] } } } ], &quot;apiCredentials&quot;: [ { &quot;oisTitle&quot;: &quot;My OIS title&quot;, &quot;securitySchemeName&quot;: &quot;requiresXApiKey&quot;, &quot;securitySchemeValue&quot;: &quot;${X_API_KEY}&quot; } ] }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Step #1: Define the security schemes for an OIS [#] (#step-1-define-the-security-schemes-for-an-ois)   You use ois[n].apiSpecifications.components.securitySchemes to define the security schemes your API will use. Consider the partial config.json above that declares a security scheme named &quot;requiresXApiKey&quot;. This scheme declares that the API requires an API key that must exist in the HTTP header named &quot;X-api-key&quot;.  Step #2: Turn on the defined security schemes [#] (#step-2-turn-on-the-defined-security-schemes)   When the scheme is defined, it is not turned on by default. You need to explicitly list the security schemes you intend to use in the security field located in ois[n].apiSpecifications.security object. The keys in this object are the names of security schemes to be used. Use empty array ([]) as values for now. Be aware that this step seems like extra work since there is no reason to define a security scheme that will not be used. However, Airnode may support [more complex authentication] (https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-requirement-object) logic in the future and using [] allows its implementation without a breaking change.  Step #3: Specify the values for the defined security schemes [#] (#step-3-specify-the-values-for-the-defined-security-schemes)   After defining and turning on a security scheme, it may be unclear what provides the value and how it is set. The authentication schemes are intended to be common for the whole OIS and set by the API provider using apiCredentials part of the config.json. The apiCredentials is an array which specifies the values for all security schemes in all OIS definitions. Each element of this array contains the following fields ---oisTitle is the title of the OIS for the particular security scheme ---securitySchemeName is the name of the security scheme ---securitySchemeValue is the actual value that should be used by Airnode when making the API request. This value is usually a secret and it is recommended to interpolate it from secrets.env. If you want to base your API authentication on dynamic data, for example [requester] (./../../../concepts/requester.html) address, you can utilize the relayed meta data security schemes [described above] (./api-security.html#relayrequesteraddress) which can forward metadata to all API operations. Relayed meta data security schemes values. The relayed meta data security schemes do not require a supplied value. Values will be provided (relayed) by Airnode depending on the particular request.  Using Different Security Schemes [#] (#using-different-security-schemes)  ---  Currently, if you want different API operations to use different security schemes they must be grouped in different OIS objects based on their common security schemes. For example, your API has four operations, three require an API key in the HTTP header, another (public /ping endpoint) requires no security. ---The first three API operations might be in the ois[0] object with a security scheme named requiresXApiKey of type apiKey as shown above. ---The /ping API operation would be in ois[1] which would not have any component.securitySchemes and security would be an empty array.  Multiple Security Schemes [#] (#multiple-security-schemes)  ----  You can use multiple security schemes (e.g., an API key goes in the header, and an additional secret goes in the query). json// inside ois[n].apiSpecifications. &quot;components&quot;: { &quot;securitySchemes&quot;: { &quot;requiresXApiKey&quot;: { &quot;type&quot;: &quot;apiKey&quot;, &quot;in&quot;: &quot;header&quot;, &quot;name&quot;: &quot;X-api-key&quot; }, &quot;specificQuerySecret&quot;: { &quot;type&quot;: &quot;apiKey&quot;, &quot;in&quot;: &quot;query&quot;, &quot;name&quot;: &quot;secret&quot; } } }, &quot;security&quot;: { &quot;requiresXApiKey&quot;: [], &quot;specificQuerySecret&quot;: [] }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  No Security [#] (#no-security)  -  If the API you are integrating is publicly accessible, you can set both the security schemes and security fields to empty objects. [Previous pageAPI Integration] (/reference/airnode/latest/understand/api-integration.html)  [Next pageConfiguring Airnode] (/reference/airnode/latest/understand/configuring.html)  "
}
