{"id":96,"distPath":"docs/.vitepress/dist/reference/airnode/latest/understand/configuring.html","indexPath":"docs/.vitepress/search-files/reference/airnode/latest/understand/configuring.json","docSet":"/reference/airnode/latest/","url":"/reference/airnode/latest/understand/configuring.html","content":"  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Understanding Airnode  Configuring Airnode [#] (#frontmatter-title)    Complete the following before configuring your Airnode. --- [API Integration] (./api-integration.html)  --- [API Security] (./api-security.html)  Note that this guide is complementary to, and not a replacement of, the [config.json reference documentation] (./../../../reference/deployment-files/config-json.html) . An Airnode is deployed or redeployed using configuration values from its config.json and secrets.env files. The config.json specifies the [Oracle Integration Specifications OIS] (/ois/v1.2/ois.html) and other specific configuration details. The secrets.env file holds secrets, such as API keys and chain provider URLs, which are referenced within the config.json file using interpolation. ![image] (/assets/config-json.180d77e6.png) The config.json file is used during the deployment/redeployment of an Airnode to configure its behavior and to provide mappings of API operations. The secrets.env file holds values for config.json that must be kept secret. The aws.env file holds AWS credentials for deployments targeted to AWS. The gcp.json file holds GCP credentials for deployments targeted to GCP. The following example files are useful while reading this doc. --- [config.json] (./../../../reference/examples/config-json.html)  --- [secrets.env] (./../../../reference/examples/secrets-env.html)  --- [aws.env] (./../../../reference/examples/aws-env.html)   Creating config.json [#] (#creating-config-json)  ----  Use the [config.json template] (./../../../reference/templates/config-json.html) to build your own Airnode configuration file or alter the [config.json example] (./../../../reference/examples/config-json.html) file. There are five root level fields in config.json. --- [chains] (./configuring-airnode.html#chains)  --- [nodeSettings] (./configuring-airnode.html#nodesettings)  --- [triggers] (./configuring-airnode.html#triggers)  --- [templates] (./configuring-airnode.html#templates)  --- [ois] (./configuring-airnode.html#ois)  --- [apiCredentials] (./configuring-airnode.html#apicredentials)   chains [#] (#chains)   Each row in the chains array represents an Ethereum blockchain the Airnode will serve as identified by the id. Currently Airnode only supports Ethereum blockchains as denoted by type: &quot;evm&quot;. There are several supported blockchains, see them in the [Airnode contract addresses] (./../../../reference/airnode-addresses.html) doc. You can use multiple chain providers for each chain and declare multiple chains each with one of more chain providers. See [Chains Providers] (./../../../concepts/chain-providers.html) in Concepts and Definitions. Below is a simple chain array with a single chain provider. json&quot;chains&quot;: [ { &quot;authorizers&quot;: { &quot;requesterEndpointAuthorizers&quot;: [ &quot;0xf18c105D0375E80980e4EED829a4A68A539E6178&quot; ] }, &quot;authorizations&quot;: { &quot;requesterEndpointAuthorizations&quot;: {} }, &quot;contracts&quot;: { &quot;AirnodeRrp&quot;: &quot;0xa0AD79D995DdeeB18a14eAef56A549A04e3Aa1Bd&quot; }, &quot;id&quot;: &quot;11155111&quot;, &quot;providers&quot;: { &quot;infuraSepolia&quot;: { &quot;url&quot;: &quot;${INFURA_SEPOLIA_PROVIDER_URL}&quot; } }, &quot;type&quot;: &quot;evm&quot;, &quot;options&quot;: { &quot;fulfillmentGasLimit&quot;: 500000, &quot;gasPriceOracle&quot;: [ { &quot;gasPriceStrategy&quot;: &quot;latestBlockPercentileGasPrice&quot;, &quot;percentile&quot;: 60, &quot;minTransactionCount&quot;: 20, &quot;pastToCompareInBlocks&quot;: 20, &quot;maxDeviationMultiplier&quot;: 2, }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedGasPrice&quot;, &quot;recommendedGasPriceMultiplier&quot;: 1.2, }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedEip1559GasPrice&quot;, &quot;baseFeeMultiplier&quot;: 2, &quot;priorityFee&quot;: { &quot;value&quot;: 3.12, &quot;unit&quot;: &quot;gwei&quot;, } }, { &quot;gasPriceStrategy&quot;: &quot;constantGasPrice&quot;, &quot;gasPrice&quot;: { &quot;value&quot;: 10, &quot;unit&quot;: &quot;gwei&quot; } } ], }, &quot;maxConcurrency&quot;: 100, &quot;blockHistoryLimit&quot;: 300, &quot;minConfirmations&quot;: 0 } ],  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 Idiosyncrasies See the dedicated [Chain Idiosyncrasies] (./../../../reference/chain-idiosyncrasies.html) page for chain-specific configuration considerations.  Considerations: Gas Price Oracle [#] (#considerations-gas-price-oracle)   The gas price oracle strategies are applied in the order that they are listed. Airnode supports four strategies: latestBlockPercentileGasPrice, providerRecommendedGasPrice, providerRecommendedEip1559GasPrice and constantGasPrice. The only required strategy is constantGasPrice and it is recommended to place it as the last strategy in the list as it should be the final fallback for the Airnode to use if all other strategies fail. For more detail on these strategies, see the [Gas Prices] (./../../../concepts/gas-prices.html) page.  Considerations: Concurrency [#] (#considerations-concurrency)   If you set the maxConcurrency field to value X, then Airnode will guarantee that: ---At most X api calls are made to the API ---At most X transactions (made by blockchain providers) will be made by the blockchain providers of the respective chain When doing this, Airnode will calculate the total number of requests reported by all blockchain providers. If this number exceeds the maximum concurrency limit, Airnode will start processing the oldest request from the blockchain providers until the number of processed requests reaches the limit. All other requests are dropped and will be processed in the next Airnode run. Note that this request dropping happens for each chain separately. For example, if maxConcurrency is set to 5 and there are three providers (A, B and C) and they reported the following requests: ---A1, A2, A3, A4 and A5 ---B1, B2 and B3 ---C1 and C2 The above example results in the following requests: A1, A2, B1, B2, and C1. WARNING Note, that this limit only applies to the requests initiated on chain. For example, requests initiated using HTTP gateway are not included in this limit. Also note that, this limit is configured per chain and the limits of different chains are unrelated to each other.  References: chains [#] (#references-chains)   The below links offer details for each field: --- [authorizers] (./../../../reference/deployment-files/config-json.html#authorizers)  --- [contracts] (./../../../reference/deployment-files/config-json.html#contracts)  --- [id] (./../../../reference/deployment-files/config-json.html#id)  --- [providers] (./../../../reference/deployment-files/config-json.html#providers)  --- [type] (./../../../reference/deployment-files/config-json.html#type)  --- [options] (./../../../reference/deployment-files/config-json.html#options)  - [options.fulfillmentGasLimit] (./../../../reference/deployment-files/config-json.html#options-fulfillmentgaslimit)  - [options.gasPriceOracle] (./../../../reference/deployment-files/config-json.html#options-gaspriceoracle-n)  - [options.withdrawalRemainder] (./../../../reference/deployment-files/config-json.html#options-withdrawalremainder)  --- [maxConcurrency] (./../../../reference/deployment-files/config-json.html#maxconcurrency)  --- [blockHistoryLimit] (./../../../reference/deployment-files/config-json.html#blockhistorylimit)  --- [minConfirmations] (./../../../reference/deployment-files/config-json.html#minconfirmations)   nodeSettings [#] (#nodesettings)   The nodeSettings field holds node-specific (Airnode) configuration parameters. json{ &quot;nodeSettings&quot;: { &quot;cloudProvider&quot;: { &quot;type&quot;: &quot;aws&quot;, &quot;region&quot;: &quot;us-east-1&quot;, &quot;disableConcurrencyReservations&quot;: false }, &quot;airnodeWalletMnemonic&quot;: &quot;${AIRNODE_WALLET_MNEMONIC}&quot;, &quot;heartbeat&quot;: { &quot;enabled&quot;: true, &quot;apiKey&quot;: &quot;${HEARTBEAT_API_KEY}&quot;, &quot;url&quot;: &quot;${HEARTBEAT_URL}&quot; }, &quot;httpGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;httpSignedDataGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;logFormat&quot;: &quot;plain&quot;, &quot;logLevel&quot;: &quot;INFO&quot;, &quot;nodeVersion&quot;: &quot;0.10.0&quot;, &quot;stage&quot;: &quot;dev&quot; },  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Considerations: Cloud Providers [#] (#considerations-cloud-providers)   Currently, Amazon Web Services (AWS) and Google Cloud Platform (GCP) are supported cloud providers for hosting Airnode. Note that while many fields within nodeSettings are required by both, there are some cloud provider specific fields. For example, cloudProvider.projectId is only required with GCP. Also note that not all cloud provider regions can be deployed to; see the [cloudProvider.region reference] (./../../../reference/deployment-files/config-json.html#cloudprovider-region) for more information.  Considerations: Gateways [#] (#considerations-gateways)   Airnode offers two gateways for accessing provider HTTP endpoints without using the blockchain: httpGateway and httpSignedDataGateway. For more information on each of these see the [HTTP Gateways] (./http-gateways.html) documentation. Also note that that distinct API keys must be used for each.  References: nodeSettings [#] (#references-nodesettings)   --- [cloudProvider] (./../../../reference/deployment-files/config-json.html#cloudprovider)  - [cloudProvider.type] (./../../../reference/deployment-files/config-json.html#cloudprovider-type)  - [cloudProvider.region] (./../../../reference/deployment-files/config-json.html#cloudprovider-region)  - [cloudProvider.disableConcurrencyReservations] (./../../../reference/deployment-files/config-json.html#cloudprovider-disableconcurrencyreservations)  - [cloudProvider.projectId] (./../../../reference/deployment-files/config-json.html#cloudprovider-projectid)  --- [airnodeWalletMnemonic] (./../../../reference/deployment-files/config-json.html#airnodewalletmnemonic)  --- [heartbeat] (./../../../reference/deployment-files/config-json.html#heartbeat)  - [heartbeat.enabled] (./../../../reference/deployment-files/config-json.html#heartbeat-enabled)  - [heartbeat.apiKey] (./../../../reference/deployment-files/config-json.html#heartbeat-apikey)  - [heartbeat.url] (./../../../reference/deployment-files/config-json.html#heartbeat-url)  --- [httpGateway] (./../../../reference/deployment-files/config-json.html#httpgateway)  - [httpGateway.enabled] (./../../../reference/deployment-files/config-json.html#httpgateway-enabled)  - [httpGateway.maxConcurrency] (./../../../reference/deployment-files/config-json.html#httpgateway-corsorigins)  - [httpGateway.corsOrigins] (./../../../reference/deployment-files/config-json.html#httpgateway-maxconcurrency)  --- [httpSignedDataGateway] (./../../../reference/deployment-files/config-json.html#httpsigneddatagateway)  - [httpSignedDataGateway.enabled] (./../../../reference/deployment-files/config-json.html#httpsigneddatagateway-enabled)  - [httpSignedDataGateway.maxConcurrency] (./../../../reference/deployment-files/config-json.html#httpsigneddatagateway-maxconcurrency)  - [httpSignedDataGateway.corsOrigins] (./../../../reference/deployment-files/config-json.html#httpsigneddatagateway-corsorigins)  --- [logFormat] (./../../../reference/deployment-files/config-json.html#logformat)  --- [logLevel] (./../../../reference/deployment-files/config-json.html#loglevel)  --- [nodeVersion] (./../../../reference/deployment-files/config-json.html#nodeversion)  --- [stage] (./../../../reference/deployment-files/config-json.html#stage)   triggers [#] (#triggers)   The triggers field allows you to expose Airnode endpoints from an OIS selectively for the RRP protocol or via the HTTP gateway. For example, your OIS may include 10 endpoints, but you may only want to serve 2 for RRP and all 10 for the gateway. List the endpoints that you want to serve with the requestâ€“response protocol (RRP) under triggers.rrp. List the endpoints that you want to serve with the HTTP gateway under triggers.http. List the endpoints which can be used to get the signed data in triggers.httpSignedData. In most cases, you would create a trigger for each endpoint in your OIS object. json&quot;triggers&quot;: { &quot;rrp&quot;: [ { &quot;endpointId&quot;: &quot;0xd4b0718c9a3316dbd831e6d01058202e5dde20a116304419f0d79e07a82b46bf&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Requests&quot;, &quot;endpointName&quot;: &quot;coinGeckoMarketData&quot;, &quot;cacheResponses&quot;: false } ], &quot;http&quot;: [ { &quot;endpointId&quot;: &quot;0xd4b0718c9a3316dbd831e6d01058202e5dde20a116304419f0d79e07a82b46bf&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Requests&quot;, &quot;endpointName&quot;: &quot;coinGeckoMarketData&quot; } ], &quot;httpSignedData&quot;: [ { &quot;endpointId&quot;: &quot;0xd4b0718c9a3316dbd831e6d01058202e5dde20a116304419f0d79e07a82b46bf&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Requests&quot;, &quot;endpointName&quot;: &quot;coinGeckoMarketData&quot; } ] },  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  Considerations: triggers [#] (#considerations-triggers)   The endpointId required for rrp, http, and httpSignedData can be derived from the oisTitle and endpointName using the CLI command [derive-endpoint-id] (./../../../reference/packages/admin-cli.html#derive-endpoint-id) . Remember that an Airnode&#39;s config.json file can have more than one OIS object and that these endpoints can be triggers for rrp, http, and/or httpSignedData as desired.  References: triggers [#] (#references-triggers)   --- [rrp] (./../../../reference/deployment-files/config-json.html#rrp)  - [rrp[n].endpointId] (./../../../reference/deployment-files/config-json.html#rrp-n-endpointid)  - [rrp[n].oisTitle] (./../../../reference/deployment-files/config-json.html#rrp-n-oistitle)  - [rrp[n].endpointName] (./../../../reference/deployment-files/config-json.html#rrp-n-endpointname)  - [rrp[n].cacheResponses] (./../../../reference/deployment-files/config-json.html#rrp-n-cacheresponses)  --- [http] (./../../../reference/deployment-files/config-json.html#http)  - [http[n].endpointId] (./../../../reference/deployment-files/config-json.html#http-n-endpointid)  - [http[n].oisTitle] (./../../../reference/deployment-files/config-json.html#http-n-oistitle)  - [http[n].endpointName] (./../../../reference/deployment-files/config-json.html#http-n-endpointname)  --- [httpSignedData] (./../../../reference/deployment-files/config-json.html#httpsigneddata)  - [httpSignedData[n].endpointId] (./../../../reference/deployment-files/config-json.html#httpsigneddata-n-endpointid)  - [httpSignedData[n].oisTitle] (./../../../reference/deployment-files/config-json.html#httpsigneddata-n-oistitle)  - [httpSignedData[n].endpointName] (./../../../reference/deployment-files/config-json.html#httpsigneddata-n-endpointname)   templates [#] (#templates)   The templates field allows you to specify templates to be used to make template requests. The array can be left empty if no templates will be used.  References: templates [#] (#references-templates)   --- [templateId] (./../../../reference/deployment-files/config-json.html#templateid)  --- [endpointId] (./../../../reference/deployment-files/config-json.html#endpointid)  --- [encodedParameters] (./../../../reference/deployment-files/config-json.html#encodedparameters)   ois [#] (#ois)   The ois field is a list OIS objects that Airnode will be serving. This means that a single instance of an Airnode can serve multiple APIs. You can simply copy paste OIS objects that you will be serving into the ois list. Use the previous guide [API Integration] (./api-integration.html) to create an OIS object. The full specification is available in the [Oracle Integration Specifications (OIS)] (/ois/v1.2/) documentation.  apiCredentials [#] (#apicredentials)   Each entry in apiCredentials maps to a security scheme defined in an OIS (ois[n].components.securitySchemes.{securitySchemeName} and ois[n].security), where oisTitle is the title field of the related OIS, and securitySchemeName is the name of the respective security scheme. These would be myOisTitle and mySecurityScheme in the example below. securitySchemeValue is the value used for the authentication with the security scheme (e.g., the API key). Note that if you do not need a security scheme, leave the apiCredentials array empty. json// apiCredentials [ { &quot;oisTitle&quot;: &quot;myOisTitle&quot;, &quot;securitySchemeName&quot;: &quot;mySecurityScheme&quot;, &quot;securitySchemeValue&quot;: &quot;${SS_MY_API_KEY}&quot; } ] // From the OIS object apiCredentials is referencing // using the oisTitle/securitySchemeName pair. { &quot;title&quot;: &quot;myOisTitle&quot;, ..., &quot;components&quot;: { &quot;securitySchemes&quot;: { &quot;mySecurityScheme&quot;: { &quot;in&quot;: &quot;header&quot;, &quot;type&quot;: &quot;apiKey&quot;, &quot;name&quot;: &quot;X-api-key&quot; } } }, &quot;security&quot;:{ &quot;mySecurityScheme&quot;: [] } ... }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Considerations: apiCredentials [#] (#considerations-apicredentials)   Currently Airnode supports the following security scheme types when making API calls: apiKey and http. For more detail, visit the previous section on [API Security] (./api-security.html) .  References: apiCredentials [#] (#references-apicredentials)   --- [oisTitle] (./../../../reference/deployment-files/config-json.html#oistitle)  --- [securitySchemeName] (./../../../reference/deployment-files/config-json.html#securityschemename)  --- [securitySchemeValue] (./../../../reference/deployment-files/config-json.html#securityschemevalue)   Creating secrets.env [#] (#creating-secrets-env)  ----  The secrets.env file contains values (secrets) such as blockchain provider urls, chain provider urls, etc. These secrets are embedded in [config.json] (./../../../reference/deployment-files/config-json.html) using interpolation. json// Sample interpolation value from config.json &quot;heartbeat&quot;: { &quot;enabled&quot;: true, &quot;apiKey&quot;: &quot;${HEARTBEAT_API_KEY}&quot; }, // Sample variable in secrets.env // Variable names cannot contain dashes (-) or start with a number. HEARTBEAT_API_KEY=&quot;d714a900-3b9e-4e4d-8eae-756ef06a8836&quot;  1 2 3 4 5 6 7 8 9 Use the [secrets.env] (./../../../reference/templates/secrets-env.html) template and refer to [Reference &gt; Deployment Files &gt; secrets.env] (./../../../reference/deployment-files/secrets-env.html) as needed.  AWS setup (AWS deployment only) [#] (#aws-setup-aws-deployment-only)  ----  When it is time to deploy the Airnode to AWS, the Docker [deployer image] (./../../docker/deployer-image.html) will need the AWS credentials to build the node on AWS Lambda.  Creating aws.env (AWS only) [#] (#creating-aws-env-aws-only)   Follow [this video] (https://www.youtube.com/watch?v=KngM5bfpttA) if needed. It will show you how to create an IAM user and get security credentials. Put them in the aws.env file as shown below. See an [example file] (./../../../reference/templates/aws-env.html) in the reference section. ---Variable names cannot contain dashes (-) or start with a number. bashAWS_ACCESS_KEY_ID=XYZ...123 AWS_SECRET_ACCESS_KEY=ABC7...89  1 2  GCP setup (GCP deployment only) [#] (#gcp-setup-gcp-deployment-only)  ----  When it is time to deploy the Airnode to GCP, the Docker [deployer image] (./../../docker/deployer-image.html) will need the GCP project ID to build the Airnode.  Creating a GCP project [#] (#creating-a-gcp-project)   First, you need to [create a GCP project] (https://cloud.google.com/resource-manager/docs/creating-managing-projects) under which will the Airnode be deployed. Once the project is created, insert its [projectId] (./configuring-airnode.html#cloudprovider) into your config.json.  Enable required API [#] (#enable-required-api)   In order for Airnode to deploy successfully, you need to enable [App Engine Admin API] (https://console.cloud.google.com/apis/library/appengine.googleapis.com) for your GCP project. After enabling it, wait a few minutes before the deployment itself so the change will take place.  Creating a Service Account [#] (#creating-a-service-account)   Create a new service account from the [Service accounts] (https://console.cloud.google.com/iam-admin/serviceaccounts) menu. Grant this service account access to the project by adding a role Owner during the creation process. Once the account is created, add a new access key of type JSON for this account. Download the key file as gcp.json into the root of your project.  Summary [#] (#summary)  ---  In this guide you created the config.json, secrets.env and obtained cloud provider credentials required to deploy an Airnode to a cloud provider. Note that config.json is user-specific and therefore it is not much use to others. The secrets.env, aws.env and gcp.json files contains keys, chain provider urls and security credentials, so they should be kept secret. Make sure that you do not push your credentials to a repository or otherwise expose them as these credentials can be used to gain access to your Airnode&#39;s private key, AWS account or GCP account. The next three steps in this guide are optional. --- [Using Authorizers] (./apply-auth.html) optional --- [Heartbeat] (./heartbeat.html) optional --- [HTTP Gateways] (./http-gateways.html) optional [Previous pageAPI Security] (/reference/airnode/latest/understand/api-security.html)  [Next pageUsing Authorizers] (/reference/airnode/latest/understand/apply-auth.html)  "}