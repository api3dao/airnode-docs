{
  "id": 99,
  "distPath": "docs/.vitepress/dist/reference/airnode/latest/understand/http-gateways.html",
  "indexPath": "docs/.vitepress/search-files/reference/airnode/latest/understand/http-gateways.json",
  "docSet": "/reference/airnode/latest/",
  "url": "/reference/airnode/latest/understand/http-gateways.html",
  "content": "  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Understanding Airnode  HTTP Gateways (optional) [#] (#frontmatter-title)    As part of the Airnode deployment you can decide to deploy two different HTTP Gateways. ---HTTP Gateway: testing ---HTTP Signed Data Gateway: production use  Gateway Differences [#] (#gateway-differences)  --  Both gateways are setup identically. The differences are in their purpose and response. ![image] (/assets/gateway.20fe7e76.png)  HTTP Gateway [#] (#http-gateway)   The regular HTTP gateway is strictly for testing purposes. Using a simple tool like CURL you can test that endpoints in the Airnode configuration are working properly without accessing the blockchain.  HTTP Signed Data Gateway [#] (#http-signed-data-gateway)   The HTTP signed data gateway is used for production purposes. While it is executed in a similar way as the HTTP gateway, its response is signed and does not contain a rawValue field. This gateway is executed by an off-chain code source that may in turn push data to a blockchain.  Setup [#] (#setup)  ----  Enable either gateway in the config.json file fields nodeSettings.httpGateway and nodeSettings.httpSignedDataGateway. ---enabled: A boolean to enable/disable for the gateway. ---maxConcurrency: (optional) A number higher than zero that represents the maximum number of serverless functions serving gateway requests. When omitted, there is no maximum concurrency set. This field is ignored for Airnode client gateways. ---corsOrigins: A list of allowed origins, [&#39;*&#39;] to allow all origins or an empty array to disable CORS. json&quot;nodeSettings&quot;: { &quot;cloudProvider&quot;: { &quot;type&quot;: &quot;aws&quot;, &quot;region&quot;: &quot;us-east-1&quot; }, &quot;airnodeWalletMnemonic&quot;: &quot;${AIRNODE_WALLET_MNEMONIC}&quot;, &quot;heartbeat&quot;: {...}, &quot;httpGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;httpSignedDataGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, ... },  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Add the desired endpoints the gateways can respond to in the triggers.http[n] and/or triggers.httpSignedData[n] arrays. The corresponding arrays do not need to match. You may want to test all endpoints but only serve certain endpoints using the HTTP signed data gateway or via RRP. json// in config.json &quot;triggers&quot;: { &quot;rrp&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, &quot;cacheResponses&quot;: false } ], &quot;http&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, } ], &quot;httpSignedData&quot;: [ { &quot;endpointId&quot;: &quot;0x6db9e3e3d073ad12b66d28dd85bcf49f58577270b1cc2d48a43c7025f5c27af6&quot;, &quot;oisTitle&quot;: &quot;CoinGecko Basic Request&quot;, &quot;endpointName&quot;: &quot;coinMarketData&quot;, } ] }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  Gateway URLs [#] (#gateway-urls)  ---  The gateway implementation is different depending on how Airnode is deployed. When deployed on a cloud provider, the serverless gateway is used. Inside Airnode client, the gateway is implemented via a simple web server inside the docker container. There are subtle differences in both how the gateways work and what the gateway URLs look like. The deployer generates a secret UUID path parameter which ensures that the endpoints are not openly accessible. Therefore, the gateway URLs should be kept secret. The gateway URLs are also available as part of the payload sent from Airnode&#39;s [heartbeat] (./heartbeat.html) to your specified heartbeat URL.  When deployed on a cloud provider [#] (#when-deployed-on-a-cloud-provider)   A gateway URL is generated for each gateway (when enabled) when Airnode is deployed. You can see the URLs including the secret UUID path parameter, displayed on your terminal at the end of an Airnode deployment using a [Docker image] (./../../docker/) .  When using Airnode client [#] (#when-using-airnode-client)   Airnode client can be used to run Airnode as a docker container locally. There is a common web server for both gateways, which is exposed on the host machine. Doing so will make the gateways API accessible like a regular web server running on the machine. Each gateway has a separate endpoint as shown below. Note the PORT which is exposed as part of the Airnode client container. See the [Airnode client usage] (./../../docker/client-image.html#usage) for more details. ---http://localhost:&lt;PORT&gt;/http-data/01234567-abcd-abcd-abcd-012345678abc/&lt;endpointId&gt; - Gateway URL for the HTTP Gateway ---http://localhost:&lt;PORT&gt;/http-signed-data/01234567-abcd-abcd-abcd-012345678abc/&lt;endpointId&gt; - Gateway URL for the HTTP Signed Data Gateway  Using CURL [#] (#using-curl)  ----  In order to execute an endpoint served by either gateway, the following are required as part of the CURL call. ---Make a POST request with the endpointId as a path parameter. An endpointId can found in config.json under triggers.http.endpointId or triggers.httpSignedData.endpointId. ---Add the Content-Type header, set to application/json. ---Place the parameters/encodedParameters in the request body. CURL ParametersInCURL Options Content-Type header -H &#39;Content-Type: application/json&#39; endpointId path &lt;gatewayUrl&gt;/0x6db9e3e3d0...c7025f5c27af6 * parameters HTTP Gateway body -d &#39;{&quot;parameters&quot;: {&quot;param1&quot;: &quot;myValue&quot;, &quot;param2&quot;: 5}}&#39; * encodedParameters HTTP Signed Data Gateway body -d &#39;{&quot;encodedParameters&quot;: &quot;0x3173737300....000&quot;}&#39; * Parameters for the gateways are named differently. The HTTP signed data gateway requires that the encodedParameters be encoded using [Airnode ABI] (./../../../reference/specifications/airnode-abi-specifications.html) . Replace &lt;gatewayUrl&gt; in the examples below with the URL displayed in the terminal at the end of an Airnode deployment using a [Docker image] (./../../docker/) .  Request [#] (#request)   @tab:HTTP Gateway shcurl \\ -X POST \\ -H &#39;Content-Type: application/json&#39; \\ -d &#39;{&quot;parameters&quot;: {&quot;param1&quot;: &quot;myValue&quot;, &quot;param2&quot;: 5}}&#39; \\ &#39;&lt;gatewayUrl&gt;/0x6db9e3e3d0...c7025f5c27af6&#39;  1 2 3 4 5 @tab:HTTP Signed Data Gateway shcurl \\ -X POST \\ -H &#39;Content-Type: application/json&#39; \\ -d &#39;{&quot;encodedParameters&quot;: &quot;0x3173737300....000&quot;}&#39; \\ &#39;&lt;gatewayUrl&gt;/0x6db9e3e3d0...c7025f5c27af6&#39;  1 2 3 4 5  Response [#] (#response)   @tab:HTTP Gateway json{ &quot;rawValue&quot;: { &quot;usd&quot;: &quot;6421.4&quot; }, &quot;encodedValue&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000ef373e180&quot;, &quot;values&quot;: [&quot;64214000000&quot;] }  1 2 3 4 5 The response format is a simple JSON object with the following fields: ---rawValue - the API response ---values - an array of values after they are [extracted and converted] (./../../../reference/packages/adapter.html#conversion) to the target type ---encodedValue - the encoded bytes value that is sent as payload in the response transaction on chain @tab:HTTP Signed Data Gateway json{ &quot;timestamp&quot;: &quot;1648226003&quot;, &quot;encodedValue&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000a571a14c0&quot;, &quot;signature&quot;: &quot;0xa74e4312e2e6fa2de2997ef43e417e3b82d0019ac2a84012300f706f8b213e0d6e1ae9301052ec25b71addae1b1bceb4617779abfc6acd5a951e20a0aaabe6f61b&quot; }  1 2 3 4 5 The response format is a simple JSON object with the following fields: ---timestamp - The UNIX timestamp applied to the response. ---encodedValue - The encoded bytes value that is sent as payload in the response. Suitable for use on-chain. ---signature - The response has been signed by Airnode.  Tutorials [#] (#tutorials)  --  The airnode-examples monorepo hosts examples demonstrating use of the HTTP Gateway and HTTP Signed Data Gateway, [see here] (./../../tutorial/README.html#monorepo-examples) . Furthermore, there are additional examples of using CURL to call the HTTP gateway in both the [Quick Deploy AWS] (./../../tutorial/quick-deploy-aws/#execute-endpoint) and [Quick Deploy GCP] (./../../tutorial/quick-deploy-gcp/#execute-endpoint) tutorials. [Previous pageHeartbeat] (/reference/airnode/latest/understand/heartbeat.html)  [Next pageDeploying Airnode] (/reference/airnode/latest/understand/deploying.html)  "
}
