{
  "id": 82,
  "distPath": "docs/.vitepress/dist/reference/airnode/latest/docker/deployer-image.html",
  "indexPath": "docs/.vitepress/search-files/reference/airnode/latest/docker/deployer-image.json",
  "docSet": "/reference/airnode/latest/",
  "url": "/reference/airnode/latest/docker/deployer-image.html",
  "content": "  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Docker Images  AWS/GCP Deployer Image [#] (#frontmatter-title)  ===  Use the deployer image to deploy or remove an Airnode with a cloud provider such as AWS. The simplest way is to use the pre-built packages. If you would rather build the images yourself see the [README] (https://github.com/api3dao/airnode/tree/v0.8/packages/airnode-deployer/docker) in the deployer package. Quick Deploy Demos See the [Quick Deploy Demos] (./../tutorial/) to quickly deploy and remove a preconfigured Airnode using the deployer image.  Configuration Files [#] (#configuration-files)  --  The files config.json and secrets.env are used to configure the Airnode. The aws.env and gcp.json files are used to define environment information the deployer uses to connect to these cloud providers. my-airnode â”œâ”€â”€ aws.env &lt;- Used for AWS deployment â”œâ”€â”€ gcp.json &lt;- Used for GCP deployment â”œâ”€â”€ config.json â””â”€â”€ secrets.env  1 2 3 4 5  Cloud Provider Credentials [#] (#cloud-provider-credentials)  -  In order to deploy Airnode to a serverless cloud provider, you need to provide could provider credentials to the Airnode deployer image. The deployer image currently supports deploying to AWS and GCP. For AWS deployment, see the [AWS Setup] (./../guides/build-an-airnode/configuring-airnode.html#aws-setup-aws-deployment-only) and for GCP deployment, see the [GCP Setup] (./../guides/build-an-airnode/configuring-airnode.html#gcp-setup-gcp-deployment-only) .  Deployer Image Commands [#] (#deployer-image-commands)    All three commands are similar for AWS and GCP, with differences noted where they exist. --- [deploy] (./deployer-image.html#deploy)  --- [list] (./deployer-image.html#list)  --- [info] (./deployer-image.html#info)  --- [remove] (./deployer-image.html#remove)  --- [remove-with-receipt] (./deployer-image.html#remove-with-receipt)   deploy [#] (#deploy)   The [deploy] (./../../reference/packages/deployer.html#deploy) command will create the Airnode with a cloud provider or update it if it already exists. Three files are needed to run the deploy command. ---config.json ---secrets.env ---aws.env (AWS only) ---gcp.json (GCP only) See [Deploying an Airnode] (./../guides/build-an-airnode/deploying-airnode.html#deploy-with-docker) for deployment commands specific to various operating systems and cloud providers. Note that a receipt.json file will be created upon completion. It contains some deployment information and is used to remove the Airnode. Warning about simultaneous deployments Avoid running multiple deployments simultaneously as doing so might result in a broken deployment. If this occurs, the standard removal approach may not succeed and [Manual Removal] (./deployer-image.html#manual-removal) may be required.  Normally (for Linux/Mac/WSL2) the deployer image deploy command is run by the user root. This may cause permission issues when the receipt.json file is generated. Optionally you can specify the [UID (user identifier)] (https://en.wikipedia.org/wiki/User_identifier) and [GID (group identifier)] (https://en.wikipedia.org/wiki/Group_identifier) that the deployer image should use. Do so by setting the environment variables USER_ID and GROUP_ID, otherwise omit the line containing the variables.  @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -e USER_ID=$(id -u) -e GROUP_ID=$(id -g) \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 deploy  1 2 3 4 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 deploy  1 2 3 4 Re-deployments A unique deployment is defined by the value of [nodeSetting.stage] (./../../reference/deployment-files/config-json.html#stage) . If you deploy again, using the same nodeSetting.stage value, then you are re-deploying or updating the previous deployment. By default the deployer will attempt to remove the Airnode should either a deployment or re-deployment fail. But if either fails (and [--auto-remove] (./../../reference/packages/deployer.html#deploy) is false) then the Airnode will not be removed, however it could be left in an unstable state. You can alter the deploy command to change this behavior using the following. auto-remove true|false: defaults to true no-auto-remove Auto removal is usually recommended for development deployments. For production deployments, consider changing the value of nodeSetting.stage to create a new deployment and follow-up by removing the previous deployment. Use the following example to avoid the automatic removal of the Airnode. shdocker run -it --rm \\ -e USER_ID=$(id -u) -e GROUP_ID=$(id -g) \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 deploy --auto-remove false  1 2 3 4  list [#] (#list)   Once one or more Airnodes were deployed using the [deploy] (./deployer-image.html#deploy) command above, the [list] (./../../reference/packages/deployer.html#list) command can be used to list currently deployed Airnodes. Files for cloud provider authentication are needed for the command to run correctly: aws.env (for AWS) and/or gcp.json (for GCP). @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 list  1 2 3 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 list  1 2 3 4 By default, the deployer will attempt to list Airnode instances from all the supported cloud providers. You can use the --cloud-providers option to select just the cloud providers you want the deployer to list from. @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 list --cloud-providers aws  1 2 3 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 list --cloud-providers aws  1 2 3 4  info [#] (#info)   You can retrieve more information about the deployment with the [info] (./../../reference/packages/deployer.html#info) command. Use the deployment ID from the [list] (./deployer-image.html#list) command above to request information about a specific deployment. The retrieved information include deployment&#39;s Airnode address, stage, Airnode version and the update history. Files for cloud provider authentication are needed for the command to run correctly: aws.env (for AWS) and/or gcp.json (for GCP). @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 info aws2c6ef2b3  1 2 3 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 info aws2c6ef2b3  1 2 3 4  remove [#] (#remove)   A deployed Airnode can be removed via the [remove] (./../../reference/packages/deployer.html#remove) command. To remove Airnode, use the deployment ID from the [list] (./deployer-image.html#list) command above. Airnode&#39;s update history, that can be seen by the [info] (./deployer-image.html#info) command, will be removed as well. Files for cloud provider authentication are needed for the command to run correctly: aws.env (for AWS) and/or gcp.json (for GCP). This is the recommended way to remove a deployment, but there are alternatives as described below. @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 remove aws2c6ef2b3  1 2 3 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 remove aws2c6ef2b3  1 2 3 4  remove-with-receipt [#] (#remove-with-receipt)   When an Airnode was deployed using the deploy command, a receipt.json file was created. This file is used to remove the Airnode. The [remove-with-receipt] (./../../reference/packages/deployer.html#remove-with-receipt) command is identical for AWS and GCP. Files for cloud provider authentication are needed for the command to run correctly: aws.env (for AWS) and/or gcp.json (for GCP). @tab:Linux/Mac/WSL2 shdocker run -it --rm \\ -v &quot;$(pwd):/app/config&quot; \\ api3/airnode-deployer:0.10.0 remove-with-receipt  1 2 3 @tab:Windows batch# For Windows, use CMD (not PowerShell). docker run -it --rm ^ -v &quot;%cd%:/app/config&quot; ^ api3/airnode-deployer:0.10.0 remove-with-receipt  1 2 3 4  Manual Removal [#] (#manual-removal)  --  Optionally you can remove an Airnode manually though it is highly recommended that you do so using the deployer image&#39;s remove-with-receipt or remove-with-deployment-details commands. When removing manually, you will need the short Airnode address, airnodeAddressShort (e.g., 0ab830c) and the Airnode stage name (e.g., production). These are included in the element name of AWS and GCP deployed features. Airnode has a presence in several areas of both AWS and GCP as listed below. Remember Only delete elements of a feature with the airnodeAddressShort address and stage name contained in the element&#39;s name. There can be more than one Airnode. Example: (airnode-6a6cf2d-production-run), where 6a6cf2d is the airnodeShortAddress and production is the stage name. @tab:AWS Select the region where your Airnode lives. US East (N. Virginia) us-east-1US East (Ohio) us-east-2US West (N. California) us-west-1US West (Oregon) us-west-2â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€Africa (Cape Town) af-south-1â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€Asia Pacific (Hong Kong) ap-east-1Asia Pacific (Mumbai) ap-south-1Asia Pacific (Osaka) ap-northeast-3Asia Pacific (Seoul) ap-northeast-2Asia Pacific (Singapore) ap-southeast-1Asia Pacific (Sydney) ap-southeast-2Asia Pacific (Tokyo) ap-northeast-1â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€Canada (Central) ca-central-1â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€Europe (Frankfurt) eu-central-1Europe (Ireland) eu-west-1Europe (London) eu-west-2Europe (Milan) eu-south-1Europe (Paris) eu-west-3Europe (Stockholm) eu-north-1â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€Middle East (Bahrain) me-south-1â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€South America (SÃ£o Paulo) sa-east-1 Click the following links and delete all elements for each feature with the appropriate airnodeAddressShort.  --- [EventBridge âžš ] (https://us-east-1.console.aws.amazon.com/events/home?region=us-east-1#rules) : Delete the rules.  --- [CloudWatch âžš ] (https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups) : Delete the log groups.  --- [Lambda âžš ] (https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/functions) : Delete the functions.  --- [DynamoDB âžš ] (https://us-east-1.console.aws.amazon.com/dynamodbv2/home?region=us-east-1#/tables) : There is one table to delete.  --- [IAM âžš ] (https://console.aws.amazon.com/iamv2/home?#/roles) : Delete the IAM roles.  --- [API Gateways âžš ] (https://us-east-1.console.aws.amazon.com/apigateway/main/apis?region=us-east-1) : Delete the API Gateways.  ---1--Click on the desired API Gateway. ---2--Next click on API Keys in the left hand sidebar. ---3--Then click on the Airnode specific API Key. ---4--Select the Delete API Key button to remove the key. ---5--Click [here âžš ] (https://us-east-1.console.aws.amazon.com/apigateway/main/apis?region=us-east-1) to return to the API Gateway. ---6--Delete the API Gateway. ---7--Repeat for other Airnode gateways if present. --- [S3 âžš ] (https://s3.console.aws.amazon.com/s3/home?region=us-east-1) : Delete the Airnode&#39;s S3 bucket directory, not the S3 bucket. Drill down to the directory identified by the stage name of the Airnode which can be found in the config.json and the receipt.json files.  @tab:GCP The steps below assume you have created a project that belongs to an organization.  Enter your GCP project ID: Click the following links and delete all elements in each feature. --- [API Gateways] (https://console.cloud.google.com/api-gateway/api?orgonly=true&amp;project=null&amp;supportedpurview=organizationId) : Delete the API Gateways.  ---1--Click on the gateway. ---2--Click on the GATEWAYS tab. ---3--Delete the gateway (a static red delete circle is the only feedback). Please wait as this can take a few minutes. ---4--Click on the CONFIGS tab. ---5--Delete the config file. ---6--Click the back arrow to return to the gateway summary page. ---7--Delete the gateway summary line (a static red delete circle is the only feedback). Please wait as this can take a several minutes. ---8--Repeat for other Airnode gateways if present. --- [Cloud Scheduler] (https://console.cloud.google.com/cloudscheduler?orgonly=true&amp;project=null&amp;supportedpurview=organizationId) : Delete the Cloud Scheduler.  --- [Cloud Functions] (https://console.cloud.google.com/functions?orgonly=true&amp;project=null&amp;supportedpurview=organizationId) : Delete all five Cloud Functions.  --- [Cloud Storage] (https://console.cloud.google.com/storage/browser?forceOnBucketsSortingFiltering=false&amp;orgonly=true&amp;project=null&amp;supportedpurview=organizationId&amp;prefix=&amp;forceOnObjectsSortingFiltering=false) : Delete the Airnode&#39;s bucket directory, not the bucket. Drill down to the directory identified by the stage name of the Airnode which can be found in the config.json and the receipt.json files.  After removing an Airnode it may be necessary to wait several minutes before deploying / redeploying Airnode again to the same project. GCP takes several minutes to complete its behind the scenes clean-up of deleted cloud resources.  Learn more about AWS or GCP resources that Airnode uses in the [Cloud Resources] (./../../reference/cloud-resources.html) doc. [Previous pageOverview] (/reference/airnode/latest/docker/)  [Next pageClient Image] (/reference/airnode/latest/docker/client-image.html)  "
}
