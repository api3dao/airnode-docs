{"id":68,"distPath":"docs/.vitepress/dist/reference/airnode/latest/deployment-files/config-json.html","indexPath":"docs/.vitepress/search-files/reference/airnode/latest/deployment-files/config-json.json","docSet":"/reference/airnode/latest/","url":"/reference/airnode/latest/deployment-files/config-json.html","content":"  ðŸ“‚Â Reference â†’ Airnode â†’ v1.0 â†’ Deployment Files  config.json [#] (#frontmatter-title)  ==  The config.json defines a single Airnode deployment. The file contents are a single JSON object. Each config object can be thought of as the static NoSQL database of an Airnode deployment. It contains five fields as show below. json{ &quot;chains&quot;: [], &quot;nodeSettings&quot;: {}, &quot;triggers&quot;: {}, &quot;templates&quot;: [], &quot;ois&quot;: [], &quot;apiCredentials&quot;: [] }  1 2 3 4 5 6 7 8 --- [chains] (./config-json.html#chains) : Blockchains the Airnode deployment will serve on and configuration details --- [nodeSettings] (./config-json.html#nodesettings) : General deployment parameters such as node version and deployment configuration. --- [triggers] (./config-json.html#triggers) : Which on-chain endpoints will be usable by which an available protocol (currently only RRP) and under what endpoint ID. --- [templates] (./config-json.html#templates) : --- [ois] (./config-json.html#ois) : API specifications and the corresponding on-chain endpoints, kept as [OIS] (/ois/v1.2/ois.html) objects. --- [apiCredentials] (./config-json.html#apicredentials) : Which API credentials will be usable by which OIS and security scheme.  chains [#] (#chains)  -  Lists the blockchains the Airnode deployment will serve on and specifies respective parameters. json// chains [ { &quot;authorizers&quot;: { &quot;requesterEndpointAuthorizers&quot;: [ &quot;0xf18c105D0375E80980e4EED829a4A68A539E6178&quot;, &quot;0xCE5e...1abc&quot; ] }, &quot;authorizations&quot;: { &quot;requesterEndpointAuthorizations&quot;: {} }, &quot;contracts&quot;: { &quot;AirnodeRrp&quot;: &quot;0xa0AD79D995DdeeB18a14eAef56A549A04e3Aa1Bd&quot; }, &quot;id&quot;: &quot;1&quot;, &quot;providers&quot;: { &quot;selfHostedMainnet&quot;: { &quot;url&quot;: &quot;${CP_SELF_HOSTED_MAINNET_URL}&quot; }, &quot;infuraMainnet&quot;: { &quot;url&quot;: &quot;${CP_INFURA_MAINNET_URL}&quot; } }, &quot;type&quot;: &quot;evm&quot;, &quot;options&quot;: { &quot;fulfillmentGasLimit&quot;: 500000, &quot;gasPriceOracle&quot;: [ { &quot;gasPriceStrategy&quot;: &quot;latestBlockPercentileGasPrice&quot;, &quot;percentile&quot;: 60, &quot;minTransactionCount&quot;: 20, &quot;pastToCompareInBlocks&quot;: 20, &quot;maxDeviationMultiplier&quot;: 2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedGasPrice&quot;, &quot;recommendedGasPriceMultiplier&quot;: 1.2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedEip1559GasPrice&quot;, &quot;baseFeeMultiplier&quot;: 2, &quot;priorityFee&quot;: { &quot;value&quot;: 3.12, &quot;unit&quot;: &quot;gwei&quot; } }, { &quot;gasPriceStrategy&quot;: &quot;constantGasPrice&quot;, &quot;gasPrice&quot;: { &quot;value&quot;: 10, &quot;unit&quot;: &quot;gwei&quot; } } ] }, &quot;maxConcurrency&quot;: 100, &quot;blockHistoryLimit&quot;: 300, &quot;minConfirmations&quot;: 0 }, { &quot;authorizers&quot;: { &quot;requesterEndpointAuthorizers&quot;: [] }, &quot;authorizations&quot;: { &quot;requesterEndpointAuthorizations&quot;: {} }, &quot;contracts&quot;: { &quot;AirnodeRrp&quot;: &quot;0xa0AD79D995DdeeB18a14eAef56A549A04e3Aa1Bd&quot; }, &quot;id&quot;: &quot;11155111&quot;, &quot;providers&quot;: { &quot;infuraSepolia&quot;: { &quot;url&quot;: &quot;${CP_INFURA_SEPOLIA_URL}&quot; } }, &quot;type&quot;: &quot;evm&quot;, &quot;options&quot;: { &quot;fulfillmentGasLimit&quot;: 500000, &quot;gasPriceOracle&quot;: [ { &quot;gasPriceStrategy&quot;: &quot;latestBlockPercentileGasPrice&quot;, &quot;percentile&quot;: 60, &quot;minTransactionCount&quot;: 20, &quot;pastToCompareInBlocks&quot;: 20, &quot;maxDeviationMultiplier&quot;: 2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedGasPrice&quot;, &quot;recommendedGasPriceMultiplier&quot;: 1.2 }, { &quot;gasPriceStrategy&quot;: &quot;providerRecommendedEip1559GasPrice&quot;, &quot;baseFeeMultiplier&quot;: 2, &quot;priorityFee&quot;: { &quot;value&quot;: 3.12, &quot;unit&quot;: &quot;gwei&quot; } }, { &quot;gasPriceStrategy&quot;: &quot;constantGasPrice&quot;, &quot;gasPrice&quot;: { &quot;value&quot;: 10, &quot;unit&quot;: &quot;gwei&quot; } } ], &quot;withdrawalRemainder&quot;: { &quot;value&quot;: 0, &quot;unit&quot;: &quot;wei&quot; } }, &quot;maxConcurrency&quot;: 100, &quot;blockHistoryLimit&quot;: 300, &quot;minConfirmations&quot;: 0 } ]  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  authorizers [#] (#authorizers)   (required) - An object containing authorizers scheme types that contain authorizer contract addresses specifying the auth patterns that the [AirnodeRrpV0] (./../../concepts/#airnoderrpv0-sol) contract should use on-chain. An empty &lt;authorizerSchemeType&gt; array would allow-all. Learn more about authorizers in [Concepts] (./../../concepts/authorizers.html) and [Build an Airnode] (./../../grp-providers/guides/build-an-airnode/apply-auth.html) .  authorizations [#] (#authorizations)   (required) - An object containing authorizations scheme types that contain authorized endpointId/address pairs where the address is that of a requester. Airnode uses these pairs to determine access to its endpoints during its run cycle off-chain. Nothing in authorizers can supersede permissions granted by authorizations as they take precedence. Learn more about authorizations in [Concepts] (./../../concepts/authorizations.html) and [Build an Airnode] (./../../grp-providers/guides/build-an-airnode/using-authorizations.html) .  contracts [#] (#contracts)   (required) - An object that keeps the addresses of the protocol contracts deployed on the respective chain. It must include the AirnodeRrp contract address. Although you can deploy these contracts yourself, you are recommended to use the ones that were deployed by API3 listed [here] (./../airnode-addresses.html) .  id [#] (#id)   (required) - The corresponding chain (or network) ID. If this is an Ethereum-based chain, id should be the chain ID as described in [EIP-155] (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md#list-of-chain-ids) . Refer to the documentations of the chain you will be using to find its chain ID. Supported chains are listed under [Airnode Contract Addresses] (./../airnode-addresses.html) .  providers [#] (#providers)   (required) - List of chain providers. Note that multiple can be used simultaneously. The Airnode deployment will expect to find the URLs of each of these chain providers in their respective url fields. It is generally recommended to provide url via interpolation from the secrets.env file.  type [#] (#type)   (required) - The type of chain. Currently only evm is supported.  options [#] (#options)   (required) - An object that configures chain-related options. See [Configuring an Airnode] (./../../grp-providers/guides/build-an-airnode/configuring-airnode.html#chains) for some considerations.  options.fulfillmentGasLimit [#] (#options-fulfillmentgaslimit)   (required) - The maximum gas limit allowed when Airnode responds to a request, paid by the requester. If exceeded, the request is marked as failed and will not be repeated during Airnode&#39;s next run cycle.  options.withdrawalRemainder [#] (#options-withdrawalremainder)   (optional) - An object of the form {&quot;value&quot;: 0, &quot;unit&quot;: &quot;wei&quot;} that configures the amount to subtract from the funds returned to the sponsor when making a [withdrawal] (./../../concepts/sponsor.html#withdrawals) . Defaults to zero and is relevant only for some chains (e.g. [Optimism] (./../chain-idiosyncrasies.html#optimism) ).  options.withdrawalRemainder.value [#] (#options-withdrawalremainder-value)   (required:if option.withdrawalRemainder present) - A number specifying the withdrawalRemainder value.  options.withdrawalRemainder.unit [#] (#options-withdrawalremainder-unit)   (required:if withdrawalRemainder present) - The unit of the withdrawalRemainder value. It can be one of the following: (wei, kwei, mwei, gwei, szabo, finney, ether).  options.gasPriceOracle[n] [#] (#options-gaspriceoracle-n)   (required) - A list of gas price oracle strategies that the Airnode will use in the specified order. Each strategy has its own unique set of associated fields that describes it. See [Gas Price Strategies] (./../../concepts/gas-prices.html) for an in-depth understanding. --- [latestBlockPercentileGasPrice] (./../../concepts/gas-prices.html#latestblockpercentilegasprice)  -percentile (required) - The percentile of gas prices to return from a block. -minTransactionCount (required) - The minimum amount of transactions required in a block to use for calculating a gas price percentile. -pastToCompareInBlocks (required) - The number of blocks to look back for the reference block. -maxDeviationMultiplier (required) - The maximum deviation multiplier of the latest block gas price percentile compared to the reference block gas price percentile. Used to protect against large gas price spikes. --- [providerRecommendedGasPrice] (./../../concepts/gas-prices.html#providerrecommendedgasprice)  -recommendedGasPriceMultiplier (required) - A number with a maximum of two decimals that gets multiplied by the provider reported gas price. The resulting Gas Price will equal Gas Price * providerRecommendedGasPrice. --- [providerRecommendedEip1559GasPrice] (./../../concepts/gas-prices.html#providerrecommendedeip1559gasprice)  -baseFeeMultiplier (required) - Number multiplied by the Base Fee to yield the Maximum Fee for EIP-1559 transactions. Defaults to: 2. The resulting Maximum Fee will equal (Base Fee * baseFeeMultiplier) + priorityFee. -priorityFee: (required) - An object that configures the EIP-1559 Priority Fee. Defaults: {&quot;value&quot;: 3.12, &quot;unit&quot;: &quot;gwei&quot;}.  ----priorityFee.value (required) - A number specifying the EIP-1559 priority fee value. ----priorityFee.unit (required) - The unit of the priority fee value. It can be one of the following: (wei, kwei, mwei, gwei, szabo, finney, ether). --- [constantGasPrice] (./../../concepts/gas-prices.html#constantgasprice)  -gasPrice (required) - An object of the form {&quot;value&quot;: 0, &quot;unit&quot;: &quot;wei&quot;} that configures the amount to use as gas price.  ----gasPrice.value (required) - A number specifying the gasPrice value. ----gasPrice.unit (required) The unit of the gasPrice value. It can be one of the following: (wei, kwei, mwei, gwei, szabo, finney, ether).  maxConcurrency [#] (#maxconcurrency)   (required) - The maximum number of concurrent handler calls per single Airnode invocation. Airnode is reserving ( [AWS] (https://docs.aws.amazon.com/lambda/latest/operatorguide/reserved-concurrency.html) ) and limiting ( [AWS] (https://docs.aws.amazon.com/lambda/latest/operatorguide/reserved-concurrency.html) , [GCP] (https://cloud.google.com/functions/docs/configuring/max-instances) ) the number of spawned cloud functions based on this field. If you want to disable this behavior, see [disableConcurrencyReservations] (#cloudprovider-disableconcurrencyreservations) . See [Configuring an Airnode] (./../../grp-providers/guides/build-an-airnode/configuring-airnode.html#considerations-concurrency) for additional considerations.  blockHistoryLimit [#] (#blockhistorylimit)   (optional) - The number of blocks in the past that the Airnode deployment should search for requests. Defaults to 300, roughly 1 hour for Ethereum.  minConfirmations [#] (#minconfirmations)   (optional) - The number of confirmations required for a request to be considered valid. Minimum confirmations refers to the number of blocks that have elapsed since the current confirmed block. Defaults to 0.  nodeSettings [#] (#nodesettings)  ---  An object containing general deployment parameters of an Airnode. json// nodeSettings { &quot;nodeVersion&quot;: &quot;0.10.0&quot;, &quot;cloudProvider&quot;: { &quot;type&quot;: &quot;gcp&quot;, &quot;region&quot;: &quot;us-east1&quot;, &quot;disableConcurrencyReservations&quot;: false, &quot;projectId&quot;: &quot;${GCP_PROJECT_ID}&quot; }, &quot;stage&quot;: &quot;testnet&quot;, &quot;airnodeWalletMnemonic&quot;: &quot;${AIRNODE_WALLET_MNEMONIC}&quot;, &quot;heartbeat&quot;: { &quot;enabled&quot;: true, &quot;url&quot;: &quot;${HEARTBEAT_URL}&quot;, &quot;apiKey&quot;: &quot;${HEARTBEAT_API_KEY}&quot; }, &quot;httpGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;httpSignedDataGateway&quot;: { &quot;enabled&quot;: true, &quot;maxConcurrency&quot;: 20, &quot;corsOrigins&quot;: [] }, &quot;logFormat&quot;: &quot;json&quot;, &quot;logLevel&quot;: &quot;INFO&quot; }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  cloudProvider [#] (#cloudprovider)   (required) - The cloud provider that the node will be deployed at and its configuration. Learn more about AWS or GCP resources that Airnode uses in the [Cloud Resources] (./../cloud-resources.html) documentation.  cloudProvider.type [#] (#cloudprovider-type)   (required) - Currently aws and gcp are supported for serverless ( [deployer-image] (./../../grp-providers/docker/deployer-image.html) ). Use local to run Airnode as a docker container locally ( [client-image] (./../../grp-providers/docker/client-image.html) ).  cloudProvider.region [#] (#cloudprovider-region)   (required:if cloudProvider.type is AWS or GCP) - The cloud provider region that Airnode will be deployed to. An example AWS value would be us-east-1 and an example GCP value would be us-east1. See the cloud provider&#39;s documentation for possible values, though not all regions can be deployed to. For GCP, make sure to choose a region and not a zone, and see the list below for regions that have been confirmed to work. For AWS, some regions are disabled by default and you must [enable them] (https://docs.aws.amazon.com/general/latest/gr/rande-manage.html) before you can create and manage resources. Note that transferring a deployment from one region to the other is not trivial (i.e., it does not take one command like deployment, but rather three) and is not advised. Supported GCP regions: ---asia-northeast1 ---australia-southeast1 ---europe-west1 ---europe-west2 ---us-central1 ---us-east1 ---us-east4 ---us-west2 ---us-west4  cloudProvider.disableConcurrencyReservations [#] (#cloudprovider-disableconcurrencyreservations)   (required:if cloudProvider.type is AWS or GCP) - Disables concurrency reservations for spawned cloud functions. For more information refer to the [maxConcurrency] (#maxconcurrency) section.  cloudProvider.projectId [#] (#cloudprovider-projectid)   (required:if cloudProvider.type is GCP) - Project ID of the GCP project the Airnode will be deployed under.  cloudProvider.gatewayServerPort [#] (#cloudprovider-gatewayserverport)   (optional:if cloudProvider.type is local) - The port number (defaults to 3000) of the API gateway inside the docker container. This property is especially useful, if the container is run using [host networking] (https://docs.docker.com/network/host/) .  airnodeWalletMnemonic [#] (#airnodewalletmnemonic)   (required) - The wallet mnemonic that will be used as the Airnode&#39;s BIP 44 wallet from which the Airnode&#39;s [address] (./../../concepts/airnode.html#airnodeaddress) will be derived. It is not required to fund the wallet to run the Airnode but must be funded to announce the [xpub] (./../../concepts/airnode.html#xpub) of the Airnode on-chain which is optional.  heartbeat [#] (#heartbeat)   (required) - Object configuring Airnode&#39;s heartbeat functionality. Airnode can periodically make a request to the specified URL signaling that it&#39;s active at the end of each cycle (every minute). There are plans in the future to allow the sending of a payload with information for reporting purposes. See the [Heartbeat] (./../../grp-providers/guides/build-an-airnode/heartbeat.html) documentation for more information.  heartbeat.enabled [#] (#heartbeat-enabled)   (required) - Enable or disable, using true or false, Airnode&#39;s heartbeat.  heartbeat.apiKey [#] (#heartbeat-apikey)   (required: if heartbeat.enabled is true) - The API key to authenticate against the heartbeat URL.  heartbeat.url [#] (#heartbeat-url)   (required: if heartbeat.enabled is true) - The URL to make the heartbeat request to.  httpGateway [#] (#httpgateway)   (required) - The Airnode&#39;s HTTP gateway can request endpoints without using the blockchain. See the [HTTP Gateways] (./../../grp-providers/guides/build-an-airnode/http-gateways.html) documentation for more info.  httpGateway.enabled [#] (#httpgateway-enabled)   (required) - Enable or disable, using true or false, Airnode&#39;s access to the HTTP gateway.  httpGateway.maxConcurrency [#] (#httpgateway-maxconcurrency)   (required: if httpGateway.enabled is true) - A number higher than zero representing the maximum number of serverless functions serving HTTP gateway requests running at the same time. When omitted, there is no maximum concurrency set.  httpGateway.corsOrigins [#] (#httpgateway-corsorigins)   (required: if httpGateway.enabled is true) - A list of allowed origins. An empty array ([]) can be used to disable CORS and the wildcard ([&#39;*&#39;]) can be used to allow all origins.  httpSignedDataGateway [#] (#httpsigneddatagateway)   (required) - The Airnode&#39;s HTTP gateway can request endpoints without using the blockchain. See the [HTTP Gateways] (./../../grp-providers/guides/build-an-airnode/http-gateways.html) documentation for more info.  httpSignedDataGateway.enabled [#] (#httpsigneddatagateway-enabled)   (required) - Enable/disable, using true/false, Airnode&#39;s access to the HTTP gateway.  httpSignedDataGateway.maxConcurrency [#] (#httpsigneddatagateway-maxconcurrency)   (required: if httpSignedDataGateway.enabled is true) - A number higher than zero representing the maximum number of serverless functions serving HTTP gateway requests running at the same time. When omitted, there is no maximum concurrency set.  httpSignedDataGateway.corsOrigins [#] (#httpsigneddatagateway-corsorigins)   (required: if httpSignedDataGateway.enabled is true) - A list of allowed origins. An empty array ([]) can be used to disable CORS and the wildcard ([&#39;*&#39;]) can be used to allow all origins.  logFormat [#] (#logformat)   (required) - The format that will be used to output logs. Either json or plain.  logLevel [#] (#loglevel)   (required) - The highest verbosity level of the logs that will be outputted. Options: DEBUG, INFO, WARN or ERROR.  nodeVersion [#] (#nodeversion)   (required) - The version of the node (Airnode) that will be deployed with this config object, of the form #.#.#. Since the config.json format may change with node versions, always match the config.json version with the Airnode being deployed. See the [Releases page of the Airnode repo] (https://github.com/api3dao/airnode/releases) for available versions.  stage [#] (#stage)   (required) - The label used to distinguish between multiple deployments of the same Airnode on a cloud provider. For example, the same Airnode may have multiple deployments with stage set to a different value (dev, public, prod). stage cannot be longer than 16 characters and can only include lowercase alphanumeric characters (aâ€“z, 0â€“9) and hyphens (-).  triggers [#] (#triggers)    An array that maps external triggers such as a request made through RRP (or a subscription made through PSP, which is not implemented yet) to an endpoint defined in an OIS. json// triggers { &quot;rrp&quot;: [ { &quot;endpointId&quot;: &quot;0xd7ddc8ee64d6e540682ec844a5dd9737663ec3afe5751102eb4f966744751838&quot;, &quot;oisTitle&quot;: &quot;myOisTitle&quot;, &quot;endpointName&quot;: &quot;myEndpointName&quot;, &quot;cacheResponses&quot;: false } ], &quot;http&quot;: [ { &quot;endpointId&quot;: &quot;0xd7ddc8ee64d6e540682ec844a5dd9737663ec3afe5751102eb4f966744751838&quot;, &quot;oisTitle&quot;: &quot;myOisTitle&quot;, &quot;endpointName&quot;: &quot;myEndpointName&quot; } ], &quot;httpSignedData&quot;: [ { &quot;endpointId&quot;: &quot;0xd7ddc8ee64d6e540682ec844a5dd9737663ec3afe5751102eb4f966744751838&quot;, &quot;oisTitle&quot;: &quot;myOisTitle&quot;, &quot;endpointName&quot;: &quot;myEndpointName&quot; } ] }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 In the example above, the Airnode deployment has an OIS with the title myOisTitle. This OIS has an endpoint with the name myEndpointName. When the Airnode deployment detects a [request] (./../../concepts/request.html) that references its [airnodeAddress] (./../../concepts/airnode.html#airnodeaddress) and 0xd7ddc8ee64d6e540682ec844a5dd9737663ec3afe5751102eb4f966744751838 as the [endpointId] (./../../concepts/endpoint.html#endpointid) , it will call the specified endpoint (myOisTitle-myEndpointName) with the parameters provided in the request to fulfill it. See the [endpoint id documentation] (./../../concepts/endpoint.html#endpointid) for the default convention for deriving the endpointId.  rrp [#] (#rrp)   (required) - An array of endpoints from OIS that the Airnode will respond to via the RRP protocol [AirnodeRrpV0.sol] (./../../concepts/) .  rrp[n].endpointId [#] (#rrp-n-endpointid)   (required) - A identifier derived for an oisTitle/endpointName pair. For derivation see: [derive-endpoint-id] (./../packages/admin-cli.html#derive-endpoint-id) .  rrp[n].oisTitle [#] (#rrp-n-oistitle)   (required) - The title of an OIS object.  rrp[n].endpointName [#] (#rrp-n-endpointname)   (required) - The endpoint name of an OIS endpoint.  rrp[n].cacheResponses [#] (#rrp-n-cacheresponses)   (required) - Whether to cache API responses for an endpoint by requestId and return the cached response. Useful for non-idempotent API operations like random number generators.  http [#] (#http)   (required) - An array of endpoints from OIS that the Airnode will respond to via the HTTP gateway.  http[n].endpointId [#] (#http-n-endpointid)   (required) - A identifier derived for an oisTitle/endpointName pair. For derivation see: [derive-endpoint-id] (./../packages/admin-cli.html#derive-endpoint-id) .  http[n].oisTitle [#] (#http-n-oistitle)   (required) - The title of an OIS object.  http[n].endpointName [#] (#http-n-endpointname)   (required) - The endpoint name of an OIS endpoint.  httpSignedData [#] (#httpsigneddata)   (required) - An array of endpoints from OIS that the Airnode will respond to via the HTTP Signed Data Gateway.  httpSignedData[n].endpointId [#] (#httpsigneddata-n-endpointid)   (required) - A identifier derived for an oisTitle/endpointName pair, see [derive-endpoint-id] (./../packages/admin-cli.html#derive-endpoint-id) .  httpSignedData[n].oisTitle [#] (#httpsigneddata-n-oistitle)   (required) - The title of an OIS object.  httpSignedData[n].endpointName [#] (#httpsigneddata-n-endpointname)   (required) - The endpoint name of an OIS endpoint.  templates [#] (#templates)  --  An array that includes the necessary information to make [Template Requests] (./../../concepts/request.html#template-request) . The templates array must be included in the config.json file. The array can be left empty if no templates are used . Valid templates will be used to make template requests without calling the contract to fetch the template from the chain. For details see [Using Templates] (./../../grp-developers/using-templates.html) . json// templates [ { &quot;templateId&quot;: &quot;0x02834eb43d56133982b7d6e5aa8b466c7ea4ba0fadf697698c1fee0996bba0fc&quot;, &quot;endpointId&quot;: &quot;0xd9e8c9bcc8960df5f954c0817757d2f7f9601bd638ea2f94e890ae5481681153&quot;, &quot;encodedParameters&quot;: &quot;0x3173000000000000000000000000000000000000000000000000000000000000636f696e49640000000000000000000000000000000000000000000000000000657468657265756d000000000000000000000000000000000000000000000000&quot; } ]  1 2 3 4 5 6 7 8  templateId [#] (#templateid)   (required: for each row in templates) - An identifier derived by hashing the Airnode address, the endpointId and the encoded parameters of the template. For derivation see: [Templates] (./../../concepts/template.html#templateid) .  endpointId [#] (#endpointid)   (required: for each row in templates) - An identifier derived for an oisTitle/endpointName pair. For derivation see: [derive-endpoint-id] (./../packages/admin-cli.html#derive-endpoint-id) .  encodedParameters [#] (#encodedparameters)   (required: for each row in templates) - The encoded request parameters.  ois [#] (#ois)    A list of OIS objects. Since each OIS specifies the integration of an API to an oracle, a single Airnode deployment can serve multiple APIs. To avoid duplication of content, see the [API Integration] (./../../grp-providers/guides/build-an-airnode/api-integration.html) guide and the [Oracle Integration Specifications (OIS)] (/ois/v1.2/) documentation.  apiCredentials [#] (#apicredentials)  --  Each entry in apiCredentials maps to a security scheme defined in an OIS (ois[n].components.securitySchemes.{securitySchemeName}), where oisTitle is the title field of the related OIS, and securitySchemeName is the name of the respective security scheme. These would be myOisTitle and mySecurityScheme in the example below. securitySchemeValue is the value used for the authentication with the security scheme (e.g., the API key) which would be in secrets.env in the example below. For more implementation details, see the [API Security] (./../../grp-providers/guides/build-an-airnode/api-security.html) documentation. The security field in the OIS object must be included and hold the names of all security schemes the API operation Note that if you do not need a security scheme, leave the apiCredentials array empty. json// apiCredentials [ { &quot;oisTitle&quot;: &quot;myOisTitle&quot;, &quot;securitySchemeName&quot;: &quot;mySecurityScheme&quot;, &quot;securitySchemeValue&quot;: &quot;${SS_MY_API_KEY}&quot; } ] // components and security field in OIS object { &quot;title&quot;: &quot;myOisTitle&quot;, ..., &quot;components&quot;: { &quot;securitySchemes&quot;: { &quot;mySecurityScheme&quot;: { &quot;in&quot;: &quot;header&quot;, &quot;type&quot;: &quot;apiKey&quot;, &quot;name&quot;: &quot;X-api-key&quot; } } }, &quot;security&quot;: { &quot;mySecurityScheme&quot; [] } ... }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  oisTitle [#] (#oistitle)   (required: for each row in apiCredentials) - The ois.title of the OIS where the securitySchemeName can be found.  securitySchemeName [#] (#securityschemename)   (required: for each row in apiCredentials) - The name of a security scheme from ois[n].components.securitySchemes.{securitySchemeName}.  securitySchemeValue [#] (#securityschemevalue)   (required: for each row in apiCredentials) - The value of the security scheme used (as defined by ois[n].components.securitySchemes.{securitySchemeName} for the authentication. Usually stored in secrets.env. [Previous pageOverview] (/reference/airnode/latest/deployment-files/)  [Next pagesecrets.env] (/reference/airnode/latest/deployment-files/secrets-env.html)  "}