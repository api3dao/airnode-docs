{
  "id": 108,
  "distPath": "docs/.vitepress/dist/reference/dapis/best-practices.html",
  "indexPath": "docs/.vitepress/search-files/reference/dapis/best-practices.json",
  "docSet": "/reference/dapis/best-practices.html/",
  "url": "/reference/dapis/best-practices.html",
  "content": "  ðŸ“‚Â Reference â†’ dAPIs  Best Practices [#] (#frontmatter-title)    dAPIs are aggregated from multiple beacons using a decentralized pool of independent Airnodes. All Airnodes are API provider owned and operated. API providers supply data to the DAPIServer contract which lives on many chains. dAPP developers should consider a few important aspects of dAPIs in general. ---Ease of Use ---Monitoring ---Security  Ease of Use [#] (#ease-of-use)  -  dAPIs are the quickest way to connect your smart contracts to the real-world data such as asset prices. One use for dAPIs is to retrieve the latest pricing data of an asset in a single call and use that data either on-chain in a smart contract or off-chain in another application of choosing. If you already have a project started and would like to integrate dAPIs, add the DapiServer contract to your existing smart contract. It is straight forward to call a dAPI using the DapiServer contract. solidityimport &quot;@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol&quot;; ... (value, timestamp) = IDapiServer(_dapiServerContractAddress).readDataFeedWithDapiName(_dapiName); }  1 2 3 4 5 See the details in the [dApp Developers section] (./../developers/read-data-feed-with-dapi-name.html) of the dAPI project. Consideration for &quot;Ease of Use&quot; Use the DapiServer.sol contract function [readDataFeedWithDapiName(_dapiName)] (./../developers/read-data-feed-with-dapi-name.html) as the best way to access dAPI values as aggregated beacon values.  Monitoring [#] (#monitoring)  ----  Code sample here written in nodejs. Consideration for &quot;Monitoring&quot; Build and deploy a monitoring app of your own that checks dAPIs that are important to you.  Security [#] (#security)    dAPP developers do not need to trust API3 as all Airnodes are owned and operated by an API provider. Each API provider has deployed their Airnode using a secrets.env file that API3 does not possess. Therefore the Airnode operates under the complete autonomy of the API provider who&#39;s signed data is used to update [DapiServer.sol] (https://github.com/api3dao/airnode-protocol-v1/blob/main/contracts/dapis/DapiServer.sol) contract. API3 cannot alter values from API providers. Consideration for &quot;Security&quot; All [API3 source code] (https://github.com/orgs/api3dao/repositories?type=all) is open sourced and can be verified by anyone. Consider reading through API3 source code to verify claims of security. [Next pagedAPI Names] (/reference/dapis/)  "
}
