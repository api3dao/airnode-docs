{
  "id": 0,
  "distPath": "docs/.vitepress/dist/reference/dapis/functions/read-data-feed-with-id.html",
  "indexPath": "docs/.vitepress/search-files/reference/dapis/functions/read-data-feed-with-id.json",
  "docSet": "/reference/dapis/functions/",
  "url": "/reference/dapis/functions/read-data-feed-with-id.html",
  "content": "[ Skip to content ] (#VPContent)  [![image] (/./api3-inactive.png)![image] (/./API3-Active.png)Documentation] (/)  Main Navigation [Home] (/) [Explore] (/explore/) [Guides] (/guides/)  Reference [dAPIs] (/reference/dapis/)  [Airnode] (/reference/airnode/latest/)  [ChainAPI] (/reference/chainapi/)  [OIS] (/reference/ois/latest/)  [QRNG] (/reference/qrng/)  [DAO Members] (/reference/dao-members/)  üîç  [GitHub] (https://github.com/api3dao/api3-docs) [Discord] (https://discord.com/channels/758003776174030948/765618225144266793)  Appearance [GitHub] (https://github.com/api3dao/api3-docs) [Discord] (https://discord.com/channels/758003776174030948/765618225144266793)  Menu [ Return to top ] (#)  üìÇ  Sidebar Navigation  [dAPI Names] (/reference/dapis/) [ID and Name Schemes] (/reference/dapis/schemes.html) [DapiServer.sol] (/reference/dapis/dapi-server-sol.html) [Chains and Contracts] (/reference/dapis/chains.html)   DapiServer Functions --------------------  [‚Üí Read Datafeed With Dapi Name] (/reference/dapis/functions/read-data-feed-with-dapi-name.html) [‚Üí Read Datafeed Value With dAPI Name] (/reference/dapis/functions/read-data-feed-value-with-dapi-name.html) [‚Üí Read Datafeed With Id] (/reference/dapis/functions/read-data-feed-with-id.html) [‚Üí Read Datafeed Value With Id] (/reference/dapis/functions/read-data-feed-value-with-id.html) [‚Üí Reader Can Read Datafeed] (/reference/dapis/functions/reader-can-read-datafeed.html) [‚Üí Datafeed Id To Reader To Whitelist Status] (/reference/dapis/functions/data-feed-id-to-reader-to-whitelist-status.html)  On this page Table of Contents for current page  üìÇ¬†Reference ‚Üí dAPIs ‚Üí DapiServer Functions  readDataFeedWithId() [#] (#frontmatter-title)  ================================================================================================  This function uses IDs. Be sure to understand the difference between using a name or ID. See [dAPI Names] (./../) . This function reads a value and timestamp directly from a Beacon or Beacon set using its ID. In the code example below, _datafeedId is a Beacon or Beacon set ID. For on-chain smart contracts the msg.sender argument received by the function [readDataFeedWithId()] (https://github.com/api3dao/airnode-protocol-v1/blob/v0.5.0/contracts/dapis/DapiServer.sol#L691-L703) must have [read access] (./#coverage-policies) for the dAPI requested. Calling from off-chain code (using a library such as ether.js) is not subject to coverage policies. Off-chain code is beyond the scope of this doc.  Example Code [#] (#example-code)  -----------------------------------------------------------------------------------  solidity// SPDX-License-Identifier: MIT pragma solidity 0.8.9; import &quot;@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol&quot;; contract mySmartContract { function myGetDataFeedValue( address _dapiServerContractAddress, bytes32 _datafeedId ) external { int224 private value; uint32 private timestamp; // Calling the DapiServer for a data feed value and timestamp. (value, timestamp) = IDapiServer(_dapiServerContractAddress).readDataFeedWithId(_datafeedId); } }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 See another code example of readDataFeedWithId() in the [data-feed-reader-example repo] (https://github.com/api3dao/data-feed-reader-example/blob/main/contracts/DataFeedReaderExample.sol#L9) ‚ûö .  Parameters [#] (#parameters)  -------------------------------------------------------------------------------  readDataFeedWithId(bytes32 _datafeedId) ---bytes32 datafeedId - The ID of a Beacon or Beacon set to retrieve a value and timestamp for.  Returns [#] (#returns)  -------------------------------------------------------------------------  ---int224 value - The value of the Beacon or Beacon set. ---uint32 timestamp - The timestamp associated with the value. Please note: The DapiServer.sol contract casts the reported data point to int224. If this is a problem (because the reported data may not fit into 224 bits or it is of a completely different type such as bytes32), do not use this contract and implement a customized version instead. The contract casts the timestamps to uint32, which means it will not work work past-2106 in the current form. If this is an issue, consider casting the timestamps to a larger type. If the timestamp of a data feed is zero, this means that it was never written to. This may be the case for new data feeds. Therefore a zero value in the value field is not valid if the timestamp is zero. In general, make sure to check if the timestamp of the data feed is fresh enough, and definitely disregard data feeds with a zero timestamp. [Previous page‚Üí Read Datafeed Value With dAPI Name] (/reference/dapis/functions/read-data-feed-value-with-dapi-name.html)  [Next page‚Üí Read Datafeed Value With Id] (/reference/dapis/functions/read-data-feed-value-with-id.html)  Released under the MIT License. Copyright ¬© 2019-present API3 "
}
