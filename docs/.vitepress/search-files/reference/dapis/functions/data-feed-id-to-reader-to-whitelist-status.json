{
  "id": 0,
  "distPath": "docs/.vitepress/dist/reference/dapis/functions/data-feed-id-to-reader-to-whitelist-status.html",
  "indexPath": "docs/.vitepress/search-files/reference/dapis/functions/data-feed-id-to-reader-to-whitelist-status.json",
  "docSet": "/reference/dapis/functions/",
  "url": "/reference/dapis/functions/data-feed-id-to-reader-to-whitelist-status.html",
  "content": "[ Skip to content ] (#VPContent)  [![image] (/./api3-inactive.png)![image] (/./API3-Active.png)Documentation] (/)  Main Navigation [Home] (/) [Explore] (/explore/) [Guides] (/guides/)  Reference [dAPIs] (/reference/dapis/)  [Airnode] (/reference/airnode/latest/)  [ChainAPI] (/reference/chainapi/)  [OIS] (/reference/ois/latest/)  [QRNG] (/reference/qrng/)  [DAO Members] (/reference/dao-members/)  üîç  [GitHub] (https://github.com/api3dao/api3-docs) [Discord] (https://discord.com/channels/758003776174030948/765618225144266793)  Appearance [GitHub] (https://github.com/api3dao/api3-docs) [Discord] (https://discord.com/channels/758003776174030948/765618225144266793)  Menu [ Return to top ] (#)  üìÇ  Sidebar Navigation  [dAPI Names] (/reference/dapis/) [ID and Name Schemes] (/reference/dapis/schemes.html) [DapiServer.sol] (/reference/dapis/dapi-server-sol.html) [Chains and Contracts] (/reference/dapis/chains.html)   DapiServer Functions --------------------  [‚Üí Read Datafeed With Dapi Name] (/reference/dapis/functions/read-data-feed-with-dapi-name.html) [‚Üí Read Datafeed Value With dAPI Name] (/reference/dapis/functions/read-data-feed-value-with-dapi-name.html) [‚Üí Read Datafeed With Id] (/reference/dapis/functions/read-data-feed-with-id.html) [‚Üí Read Datafeed Value With Id] (/reference/dapis/functions/read-data-feed-value-with-id.html) [‚Üí Reader Can Read Datafeed] (/reference/dapis/functions/reader-can-read-datafeed.html) [‚Üí Datafeed Id To Reader To Whitelist Status] (/reference/dapis/functions/data-feed-id-to-reader-to-whitelist-status.html)  On this page Table of Contents for current page  üìÇ¬†Reference ‚Üí dAPIs ‚Üí DapiServer Functions  dataFeedIdToReaderToWhitelistStatus() [#] (#frontmatter-title)  =================================================================================================================  For on-chain smart contracts, the function [dataFeedIdToReaderToWhitelistStatus()] (https://github.com/api3dao/airnode-protocol-v1/blob/v0.5.0/contracts/dapis/DapiServer.sol#L791-L806) returns [read access] (./#coverage-policies) information with the expirationTimestamp and indefiniteWhitelistCount of a reader for the specified dAPI data feed. The reader will not be able to read the dAPI data feed past the expirationTimestamp (assuming their indefiniteWhitelistCount is 0 ). If the indefiniteWhitelistCount is greater than 0 , the reader will be able to read the data feed indefinitely (regardless of the value of expirationTimestamp).  Example Code [#] (#example-code)  -----------------------------------------------------------------------------------  solidity// SPDX-License-Identifier: MIT pragma solidity 0.8.9; import &quot;@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol&quot;; contract mySmartContract { function myReadable( address _dapiServerContractAddress, bytes32 _datafeedId ) external { uint64 expirationTimestamp; uint192 indefiniteWhitelistCount; // Calling the DapiServer for reader status // where &quot;this&quot; is the contract address of this contract (myReadable). (expirationTimestamp, indefiniteWhitelistCount) = IDapiServer(_dapiServerContractAddress).dataFeedIdToReaderToWhitelistStatus(_datafeedId, address(this)); } }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 dAPI name If you want to check the status for a dAPI name, you first need to encode the dAPI name to bytes32 then calculate the hash off-chain of the encoded name as shown below. Afterwards, pass the value of dapiNameHash as _datafeedId in the example above. solidityencodedDapiName = ethers.utils.formatBytes32String(dapiName);  1 soliditydapiNameHash = ethers.utils.solidityKeccak256([&#39;bytes32&#39;], [encodedDapiName]);  1  Parameters [#] (#parameters)  -------------------------------------------------------------------------------  readerCanReadDataFeed(bytes32 datafeedId, address reader) ---bytes32 datafeedId - The ID of a dAPI, Beacon, or Beacon set. ---address reader - The address to verify such as the reader&#39;s smart contract address or another address.  Returns [#] (#returns)  -------------------------------------------------------------------------  expirationTimestamp - Timestamp at which the whitelisting of the reader will expire. indefiniteWhitelistCount - Number of times reader was whitelisted indefinitely for dataFeedId. [Previous page‚Üí Reader Can Read Datafeed] (/reference/dapis/functions/reader-can-read-datafeed.html)  Released under the MIT License. Copyright ¬© 2019-present API3 "
}
