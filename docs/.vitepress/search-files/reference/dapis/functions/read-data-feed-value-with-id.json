{"id":115,"distPath":"docs/.vitepress/dist/reference/dapis/functions/read-data-feed-value-with-id.html","indexPath":"docs/.vitepress/search-files/reference/dapis/functions/read-data-feed-value-with-id.json","docSet":"/reference/dapis/functions/","url":"/reference/dapis/functions/read-data-feed-value-with-id.html","content":"  ðŸ“‚Â Reference â†’ dAPIs â†’ DapiServer Functions  readDataFeedValueWithId() [#] (#frontmatter-title)  =  This function uses IDs. Be sure to understand the difference between using a name or ID. See [dAPI Names] (./../) . This function reads a value directly from a Beacon or Beacon set using its ID. In the code example below, _datafeedId is a Beacon or Beacon set ID. For on-chain smart contracts the msg.sender argument received by the function [readDataFeedValueWithId()] (https://github.com/api3dao/airnode-protocol-v1/blob/v0.5.0/contracts/dapis/DapiServer.sol#L708-L721) must have [read access] (./#coverage-policies) for the dAPI requested. Calling from off-chain code (using a library such as ether.js) is not subject to coverage policies. Off-chain code is beyond the scope of this doc.  Example Code [#] (#example-code)  ---  solidity// SPDX-License-Identifier: MIT pragma solidity 0.8.9; import &quot;@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol&quot;; contract mySmartContract { function myGetDataFeedValue( address _dapiServerContractAddress, bytes32 _datafeedId ) external { int224 private value; // Calling the DapiServer for a data feed value. value = IDapiServer(_dapiServerContractAddress).readDataFeedValueWithId(_datafeedId); } }  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 See another code example of readDataFeedValueWithId() in the [data-feed-reader-example repo] (https://github.com/api3dao/data-feed-reader-example/blob/main/contracts/DataFeedReaderExample.sol#L19) âžš .  Parameters [#] (#parameters)  ----  readDataFeedValueWithId(bytes32 _datafeedId) ---bytes32 datafeedId - The ID of a Beacon or Beacon set to retrieve a value for.  Returns [#] (#returns)  ---  ---int224 value - The value of the Beacon or Beacon set. Please note: The DapiServer.sol contract casts the reported data point to int224. If this is a problem (because the reported data may not fit into 224 bits or it is of a completely different type such as bytes32), do not use this contract and implement a customized version instead. The contract casts the timestamps to uint32, which means it will not work work past-2106 in the current form. If this is an issue, consider casting the timestamps to a larger type. If the timestamp is 0 then the function will revert with &quot;Data feed does not exist&quot;. [Previous pageâ†’ Read Datafeed With Id] (/reference/dapis/functions/read-data-feed-with-id.html)  [Next pageâ†’ Reader Can Read Datafeed] (/reference/dapis/functions/reader-can-read-datafeed.html)  "}